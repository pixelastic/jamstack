[
  {
    "content": "hello everybody and welcome to another episode of learn",
    "start": 6
  },
  {
    "content": "with jason today on the show we have shruti kapoor thank you so much for",
    "start": 10
  },
  {
    "content": "joining us thank you for having me jason did you",
    "start": 14
  },
  {
    "content": "see my overlay just tweak oh that was great",
    "start": 18
  },
  {
    "content": "it was like the whole thing just forgot that we were playing um",
    "start": 20
  },
  {
    "content": "so it's great to see you um i'm i'm very very happy to have you on the show uh it",
    "start": 25
  },
  {
    "content": "looks like the chat is also very excited they're booping the hell out of us",
    "start": 29
  },
  {
    "content": "um what's up chad good to see you oh boy we started off strong with a",
    "start": 32
  },
  {
    "content": "subscription thank you emilu really appreciate that",
    "start": 40
  },
  {
    "content": "um okay so shruti uh i know you we both spoke at uh react india together",
    "start": 43
  },
  {
    "content": "and it was it was a lot of fun um and i feel like",
    "start": 49
  },
  {
    "content": "like you i what i've always appreciated about you is you've got",
    "start": 54
  },
  {
    "content": "a great sense of humor um you you run the the",
    "start": 58
  },
  {
    "content": "like the dev jokes hashtag that always makes me smile",
    "start": 61
  },
  {
    "content": "um so for those of us who aren't familiar with you and",
    "start": 64
  },
  {
    "content": "and your work uh could you give us a little bit of a background and like",
    "start": 68
  },
  {
    "content": "maybe a joke sure okay uh hey everyone i am shruti kapoor i am a",
    "start": 71
  },
  {
    "content": "senior software engineer at paypal i've been at paypal for two years um",
    "start": 77
  },
  {
    "content": "i've been i live in the bay area i've been in the",
    "start": 82
  },
  {
    "content": "bay area for like four years now um some things about me i love graphql",
    "start": 84
  },
  {
    "content": "javascript um react but more than that i love dev jokes so",
    "start": 91
  },
  {
    "content": "i'm gonna give you my first doubt okay so uh you guys can answer in the",
    "start": 98
  },
  {
    "content": "chat as well and i'll be reading the chat so",
    "start": 106
  },
  {
    "content": "the first question is why do fish like react",
    "start": 109
  },
  {
    "content": "why do fish don't like react why do fish not like react what do you think chat",
    "start": 113
  },
  {
    "content": "oh no no ideas from chad i think oh because it has hooks",
    "start": 127
  },
  {
    "content": "did the chat get it that is right i love it that's that's excellent um hey",
    "start": 131
  },
  {
    "content": "what's up we i see ken c dodds is in the chat cassie codes",
    "start": 141
  },
  {
    "content": "uh sia's in there sam what's up everybody it's great to",
    "start": 144
  },
  {
    "content": "see y'all thank you so much for coming to hang out with us today",
    "start": 148
  },
  {
    "content": "um all right so truthy i i'm really excited about this",
    "start": 151
  },
  {
    "content": "because uh today we're gonna do something a little bit different than",
    "start": 155
  },
  {
    "content": "the the usual learn with jason episode so um",
    "start": 158
  },
  {
    "content": "what i thought would be really interesting is you're at",
    "start": 162
  },
  {
    "content": "paypal and you're working on like massive",
    "start": 165
  },
  {
    "content": "i mean everybody's using paypal right so we've we've seen the scale",
    "start": 168
  },
  {
    "content": "of paypal we know that it's a huge enterprise app",
    "start": 171
  },
  {
    "content": "um and i thought it would be really interesting to talk about architecture",
    "start": 174
  },
  {
    "content": "right and to dig into kind of how all of these things that",
    "start": 178
  },
  {
    "content": "that you know someone like me who i mostly work on my personal website i",
    "start": 182
  },
  {
    "content": "mostly work on like projects that are a little smaller",
    "start": 187
  },
  {
    "content": "i have all these ideas i love graphql i love jam stack",
    "start": 190
  },
  {
    "content": "i wanted to talk about it in the context of something bigger something more",
    "start": 194
  },
  {
    "content": "ambitious and like how do these ideas apply to the",
    "start": 197
  },
  {
    "content": "largest possible scale um and that's where you come in because you have so",
    "start": 201
  },
  {
    "content": "much experience in that uh and and so like what what is your",
    "start": 204
  },
  {
    "content": "um what it like what i guess what are you working on now and like what are you",
    "start": 210
  },
  {
    "content": "what are you excited about in your work yeah",
    "start": 213
  },
  {
    "content": "i am working in the paypal payouts team i see",
    "start": 216
  },
  {
    "content": "gary from my team hey gary i'm working in the paypal payouts team",
    "start": 220
  },
  {
    "content": "so basically payouts is the product that helps uh paypal masters spurs money onto",
    "start": 226
  },
  {
    "content": "accounts um so the stack that we're working on",
    "start": 232
  },
  {
    "content": "is not just on the front end with react um",
    "start": 235
  },
  {
    "content": "and on the back end we have java uh so it's a",
    "start": 239
  },
  {
    "content": "uh it's uh in paper typically we have this kind of stack we'll have a micro",
    "start": 243
  },
  {
    "content": "service architecture and then we'll have java in the backend",
    "start": 247
  },
  {
    "content": "which creates rest apis and we have graphql apis which gets",
    "start": 251
  },
  {
    "content": "consumed by maybe an orchestration layer or maybe",
    "start": 255
  },
  {
    "content": "there's a graphql api itself um and on the front and side that data",
    "start": 258
  },
  {
    "content": "is consumed via that data is rendered via react",
    "start": 262
  },
  {
    "content": "components uh through a node app okay yeah",
    "start": 265
  },
  {
    "content": "um and so when you're like what i guess what is your vision for",
    "start": 270
  },
  {
    "content": "this like as it's growing um it sounds like you're starting to",
    "start": 276
  },
  {
    "content": "explore some some alternatives yeah so i think the main problem uh that we",
    "start": 279
  },
  {
    "content": "are of the main challenge that we're exploring is how can we reduce the time",
    "start": 285
  },
  {
    "content": "it takes to render our first page or our first",
    "start": 289
  },
  {
    "content": "component of the user so how can we reduce that latency that the user sees",
    "start": 293
  },
  {
    "content": "and that's where i've been exploring how jamstack can help us especially jam",
    "start": 297
  },
  {
    "content": "stack with graphql because with graphql already you're",
    "start": 301
  },
  {
    "content": "getting less data to the clients you're shipping less data",
    "start": 304
  },
  {
    "content": "that reduces the number of bytes they have to download but then also with jam",
    "start": 307
  },
  {
    "content": "stack you can actually reduce the time that it takes to actually",
    "start": 311
  },
  {
    "content": "load that first component and that's where jam stack and graphql combination",
    "start": 314
  },
  {
    "content": "kind of comes in that's what i've been exploring and experimenting with these",
    "start": 318
  },
  {
    "content": "days very cool okay so um so let's do a",
    "start": 321
  },
  {
    "content": "couple things here i'm gonna i'm gonna switch over into",
    "start": 324
  },
  {
    "content": "a collaborative view so that we can start uh we're gonna use mural today",
    "start": 326
  },
  {
    "content": "so that we can kind of draw and do architecture and notes and stuff",
    "start": 330
  },
  {
    "content": "um and then i'm gonna also do a quick shout out to our sponsors",
    "start": 333
  },
  {
    "content": "so we have live captioning today as always by white co-captioning",
    "start": 336
  },
  {
    "content": "um so huge shout out to them for making this possible for us",
    "start": 341
  },
  {
    "content": "uh boy my come on come on little overlay you can load i",
    "start": 345
  },
  {
    "content": "believe in you come on there you go",
    "start": 350
  },
  {
    "content": "[Laughter] i i think uh my my overlay is taking its",
    "start": 353
  },
  {
    "content": "sweet time loading today so um so yeah this is here's shotty's twitter",
    "start": 358
  },
  {
    "content": "you should definitely go follow her for for lots of",
    "start": 363
  },
  {
    "content": "information and also lots of good jokes um and then if you want to get live",
    "start": 367
  },
  {
    "content": "captioning it is let me refresh the page here",
    "start": 372
  },
  {
    "content": "live captioning is happening right now by white co-captioning and that is made",
    "start": 377
  },
  {
    "content": "possible by our sponsors uh netlify fauna sanity and off zero who",
    "start": 380
  },
  {
    "content": "are all kicking in to make the show more accessible to",
    "start": 385
  },
  {
    "content": "uh more people so thank you very very much to both wyco captioning and",
    "start": 387
  },
  {
    "content": "our sponsors for for doing that and um with that we have a mural that we've set",
    "start": 392
  },
  {
    "content": "up that we're going to use and if you want",
    "start": 399
  },
  {
    "content": "to follow along i really hope let's see visitor link we",
    "start": 402
  },
  {
    "content": "don't want it's i don't know not it's not that i",
    "start": 405
  },
  {
    "content": "don't trust you chad it's just that i don't trust you at all",
    "start": 408
  },
  {
    "content": "um [Laughter]",
    "start": 411
  },
  {
    "content": "so what we're gonna do trust them but don't trust the devils inside them",
    "start": 414
  },
  {
    "content": "that is that was way deeper than i think the usual",
    "start": 421
  },
  {
    "content": "information on this like trust them but don't trust the devils inside of them",
    "start": 424
  },
  {
    "content": "that all right i'm taking it i love that",
    "start": 428
  },
  {
    "content": "so what we are doing today um is we're going to talk a little bit about",
    "start": 434
  },
  {
    "content": "architecture and so if we if we maybe we should start by framing what",
    "start": 438
  },
  {
    "content": "a typical um architecture looks like so if we",
    "start": 442
  },
  {
    "content": "if we look at like i think i can do some shapes here let's do some shapes",
    "start": 447
  },
  {
    "content": "um and i'm gonna make let's let's start with like some big boxes so",
    "start": 451
  },
  {
    "content": "we'll start with a big a big blue box and we'll call this the",
    "start": 458
  },
  {
    "content": "front end if i can spell it um and so like the",
    "start": 461
  },
  {
    "content": "front end of a site is gonna sit up here somewhere um and",
    "start": 465
  },
  {
    "content": "then you're gonna have your oh boy where am i",
    "start": 469
  },
  {
    "content": "going i haven't used this tool in a while so i",
    "start": 473
  },
  {
    "content": "gotta get my my bearings again um and then you've got the back end of",
    "start": 475
  },
  {
    "content": "your site and these are kind of like sort of",
    "start": 481
  },
  {
    "content": "i don't know how would you how would you kind of define these if you were gonna",
    "start": 486
  },
  {
    "content": "break them up like what what goes into each thing or like are they even",
    "start": 491
  },
  {
    "content": "separate things am i getting presumptuous",
    "start": 494
  },
  {
    "content": "yeah question of the century right like where do you stop the front and where do",
    "start": 498
  },
  {
    "content": "you stop the backhand um so let's say that front-end is the",
    "start": 501
  },
  {
    "content": "html pages that the user sees um kind of",
    "start": 507
  },
  {
    "content": "getting into the box of back-end with node.js architecture",
    "start": 512
  },
  {
    "content": "and then java kind of is very back-end which may have like uh rest api",
    "start": 517
  },
  {
    "content": "or graphql endpoints so um we can have html pages at the top which",
    "start": 525
  },
  {
    "content": "would be front-end and then we have the layer in between that serves up those",
    "start": 531
  },
  {
    "content": "front-end pages using react and node.js and then we have",
    "start": 536
  },
  {
    "content": "the the system that serves that data which",
    "start": 541
  },
  {
    "content": "could be your java layer or python",
    "start": 544
  },
  {
    "content": "and then we have to back in like the databases itself",
    "start": 550
  },
  {
    "content": "okay so so you're saying like we've got the",
    "start": 555
  },
  {
    "content": "you like maybe we could big big bucket this into like business logic as the",
    "start": 562
  },
  {
    "content": "yeah as like the back end um and then we have i'm making these a little bit",
    "start": 567
  },
  {
    "content": "smaller so we can fit them all on the same page this isn't me",
    "start": 573
  },
  {
    "content": "trying to play favorites for front end um so we've got our our business logic",
    "start": 576
  },
  {
    "content": "and then we have our actual like data i guess databases",
    "start": 580
  },
  {
    "content": "yeah databases and the um serves that uh interface between",
    "start": 588
  },
  {
    "content": "databases and business logic anything the user receives is front end",
    "start": 594
  },
  {
    "content": "okay i got you um yeah i think i i mean i think that's",
    "start": 600
  },
  {
    "content": "correct so yeah like i guess we're trying to think",
    "start": 604
  },
  {
    "content": "of like the big the big things right so when you when",
    "start": 606
  },
  {
    "content": "you've got you've got the stuff that goes to the client",
    "start": 609
  },
  {
    "content": "you've got the way that the client gets information",
    "start": 612
  },
  {
    "content": "so like a api layer or however you know data",
    "start": 616
  },
  {
    "content": "um however that data is surfaced and then you've got your business logic",
    "start": 620
  },
  {
    "content": "which is the stuff under the hood that would",
    "start": 629
  },
  {
    "content": "say do things like let's determine whether or not",
    "start": 630
  },
  {
    "content": "someone is allowed to see this data let's do some pre-processing to",
    "start": 634
  },
  {
    "content": "um you know take some some raw figures and turn them into something a little",
    "start": 638
  },
  {
    "content": "more human readable um let's aggregate data from",
    "start": 642
  },
  {
    "content": "like our different things to show them on an analytics dashboard",
    "start": 646
  },
  {
    "content": "uh and then under the hood you've got that actual raw data so",
    "start": 649
  },
  {
    "content": "your um your user tables your like your log dumps from whatever app",
    "start": 653
  },
  {
    "content": "your all your usage stats and payment",
    "start": 659
  },
  {
    "content": "information and all those things that kind of",
    "start": 662
  },
  {
    "content": "they're not super useful if you just look at them in aggregate because it's a",
    "start": 664
  },
  {
    "content": "giant pool of information you need something to pull that out and",
    "start": 668
  },
  {
    "content": "kind of collate it um and so this is i feel like we're",
    "start": 672
  },
  {
    "content": "we're probably oversimplifying a little bit here but",
    "start": 676
  },
  {
    "content": "for the for the purposes of of you know having a discussion i feel like these",
    "start": 679
  },
  {
    "content": "are these are like big buckets that we can we can agree",
    "start": 683
  },
  {
    "content": "kind of uh",
    "start": 687
  },
  {
    "content": "that seems like that seems about right uh anyone",
    "start": 696
  },
  {
    "content": "anyone disagree chat if you are we missing anything big here",
    "start": 700
  },
  {
    "content": "a sandwich with bread in the middle called cake",
    "start": 705
  },
  {
    "content": "asking the hard questions in the chat i see um",
    "start": 712
  },
  {
    "content": "sandwich with bread in the middle that sounds like a cake to me i think i",
    "start": 715
  },
  {
    "content": "mean a sandwich with bread in the middle is just a club sandwich",
    "start": 721
  },
  {
    "content": "right [Laughter]",
    "start": 725
  },
  {
    "content": "um yeah so i think like if we look at this from a",
    "start": 729
  },
  {
    "content": "classical kind of like the the monolithic standpoint you might",
    "start": 733
  },
  {
    "content": "just like draw",
    "start": 737
  },
  {
    "content": "um let's see where am i oh i i was on this one",
    "start": 741
  },
  {
    "content": "you might actually just draw like a big square around this whole thing",
    "start": 746
  },
  {
    "content": "and say like you know this is the monolith",
    "start": 751
  },
  {
    "content": "um and when you do look at it helping me with my monolith",
    "start": 756
  },
  {
    "content": "and i wanted to draw it instead of typing it because it makes me laugh",
    "start": 765
  },
  {
    "content": "um so this is this is like our monolith right we've got",
    "start": 768
  },
  {
    "content": "this this big kind of everything lives in one place and",
    "start": 772
  },
  {
    "content": "and this i think was a pretty standard approach for",
    "start": 777
  },
  {
    "content": "a long time it still is a standard approach in a lot of places where you",
    "start": 780
  },
  {
    "content": "know you you're gonna talk to your database and",
    "start": 783
  },
  {
    "content": "do the business logic and and prep the data",
    "start": 786
  },
  {
    "content": "and expose the markup and and front end all in the same place",
    "start": 789
  },
  {
    "content": "right um and so is that you that's not what you're doing right",
    "start": 792
  },
  {
    "content": "now right you you're doing something different",
    "start": 797
  },
  {
    "content": "yeah so we don't have monolith uh we have more like",
    "start": 801
  },
  {
    "content": "microservices so we can think of this as breaking down",
    "start": 804
  },
  {
    "content": "um the front end in the api layer and the business logic",
    "start": 809
  },
  {
    "content": "so take this big monolith break it down into smaller components",
    "start": 814
  },
  {
    "content": "um they all talk to databases they may have different tables they may be",
    "start": 819
  },
  {
    "content": "talking to the same tables so we can think of as like smaller",
    "start": 823
  },
  {
    "content": "architecture components within itself and so this would almost",
    "start": 827
  },
  {
    "content": "look like if you take your your business logic",
    "start": 832
  },
  {
    "content": "and you do something like this where you've got",
    "start": 836
  },
  {
    "content": "multiple services that all kind of have the same",
    "start": 840
  },
  {
    "content": "stack and then your front end says like hey or actually",
    "start": 844
  },
  {
    "content": "even the front end could be part of the microservice is that how you're doing it",
    "start": 847
  },
  {
    "content": "now yeah yeah exactly even the front end is part",
    "start": 850
  },
  {
    "content": "of a microservice uh to the user everything looks like a",
    "start": 852
  },
  {
    "content": "like a single front end but inside it's all smaller components",
    "start": 856
  },
  {
    "content": "serving up their own front end yeah and so something like this like",
    "start": 861
  },
  {
    "content": "this could be like i'm just gonna say there could be like completely different",
    "start": 867
  },
  {
    "content": "stack in itself the front end itself and then you end up with something like",
    "start": 871
  },
  {
    "content": "you know you've got your your users and your dashboard and your",
    "start": 877
  },
  {
    "content": "billing or however you want to do that where each of these is",
    "start": 881
  },
  {
    "content": "is a whole different thing and like maybe",
    "start": 885
  },
  {
    "content": "like you said a different stack so maybe this one",
    "start": 889
  },
  {
    "content": "is um we've got a front end and it is react and then with this one",
    "start": 892
  },
  {
    "content": "maybe it's like backbone and then third one could be like angular",
    "start": 901
  },
  {
    "content": "yeah totally and then like this one is is",
    "start": 907
  },
  {
    "content": "gonna be let's say a rest api and this one is going to be um you know",
    "start": 910
  },
  {
    "content": "direct my sequel connection uh and like maybe",
    "start": 915
  },
  {
    "content": "this one is maybe this one is like just out to make",
    "start": 920
  },
  {
    "content": "you sad and it's so right something like that so you you",
    "start": 923
  },
  {
    "content": "kind of end up with like lots of different ways that you could do",
    "start": 927
  },
  {
    "content": "this and then this one's maybe built in like something like rust",
    "start": 930
  },
  {
    "content": "um and this one is a php and",
    "start": 935
  },
  {
    "content": "this one's java right so you've got all these these kind of interesting ways",
    "start": 942
  },
  {
    "content": "that you could you could approach these things that",
    "start": 945
  },
  {
    "content": "like they the teams don't necessarily need to talk",
    "start": 948
  },
  {
    "content": "and this is what makes microservices really exciting is",
    "start": 951
  },
  {
    "content": "now you're you're instead of saying like everybody's working in the same code",
    "start": 954
  },
  {
    "content": "base you've you've split things up into their concerns like this is the",
    "start": 959
  },
  {
    "content": "user's team and as long as they make sure that the",
    "start": 964
  },
  {
    "content": "user's route looks right and works then they kind of",
    "start": 968
  },
  {
    "content": "don't have to care what the dashboard team is doing they don't have to care",
    "start": 972
  },
  {
    "content": "about tech choices um exactly but so like where's the",
    "start": 974
  },
  {
    "content": "separation of concern yeah so like are we when you look at",
    "start": 978
  },
  {
    "content": "something like this like are we are we done is this uh where what are",
    "start": 983
  },
  {
    "content": "the issues that come up with something like this do you think",
    "start": 987
  },
  {
    "content": "yeah so the issue kind of depends on um in this box in the api layer box how",
    "start": 990
  },
  {
    "content": "much data are we serving to the front end right",
    "start": 997
  },
  {
    "content": "so business logic let's say that in databases we have some information that",
    "start": 999
  },
  {
    "content": "we want to sum up all the way to the front end right",
    "start": 1002
  },
  {
    "content": "so how much information are we pulling from",
    "start": 1005
  },
  {
    "content": "the database and how much of that is are we serving up",
    "start": 1008
  },
  {
    "content": "that is determined by the api layer or let's say the business logic so",
    "start": 1012
  },
  {
    "content": "both of them combined so that's one place where we have a place",
    "start": 1016
  },
  {
    "content": "where we can optimize and reduce the data that we send",
    "start": 1021
  },
  {
    "content": "and then on the front end itself like how much data are we shipping to the",
    "start": 1025
  },
  {
    "content": "users the first time they load the page is that data all necessary that's",
    "start": 1029
  },
  {
    "content": "another place where we can bring in performance um",
    "start": 1034
  },
  {
    "content": "and reduce the time it takes to load the first paint",
    "start": 1038
  },
  {
    "content": "make the first paint yeah well and so i think like this is the",
    "start": 1042
  },
  {
    "content": "other issue that that uh that we ran into",
    "start": 1047
  },
  {
    "content": "like when i was at ibm is we what we've drawn here is really clean",
    "start": 1050
  },
  {
    "content": "it's we're saying that like each team has a",
    "start": 1056
  },
  {
    "content": "very clear stack right but what i found",
    "start": 1059
  },
  {
    "content": "when i was at ibm is that it it's never actually like that it was more",
    "start": 1064
  },
  {
    "content": "like if we take this over here we had um i'm gonna simplify this a little bit so",
    "start": 1068
  },
  {
    "content": "let's say that like these orange ones are micro services so we had",
    "start": 1073
  },
  {
    "content": "a users microservice we had a",
    "start": 1078
  },
  {
    "content": "billing microservice we had an apps microservice",
    "start": 1083
  },
  {
    "content": "and these all live down here and then on our front end",
    "start": 1088
  },
  {
    "content": "and i'm just going to kind of assume that each one of these has some kind of",
    "start": 1093
  },
  {
    "content": "an api on the front of it and then on our front end we would have",
    "start": 1095
  },
  {
    "content": "like dashboard",
    "start": 1099
  },
  {
    "content": "and now dashboard didn't just use um it didn't just use users it",
    "start": 1104
  },
  {
    "content": "also used why can't i i need this get out of here um so oh boy",
    "start": 1112
  },
  {
    "content": "i haven't used this in so long sorry uh but so you know we end up with something",
    "start": 1120
  },
  {
    "content": "like this where like dashboard has to touch all of these",
    "start": 1124
  },
  {
    "content": "services and then we have to you know like we've got to make this",
    "start": 1128
  },
  {
    "content": "work so we have a different rest endpoint that",
    "start": 1134
  },
  {
    "content": "we're hitting to pull users and then billing and then apps and",
    "start": 1137
  },
  {
    "content": "before we know it we are suddenly building like a proxy",
    "start": 1140
  },
  {
    "content": "api and this proxy api is how we're",
    "start": 1145
  },
  {
    "content": "able to talk to those services and now we've got a huge problem",
    "start": 1150
  },
  {
    "content": "and like are have you run into this do you want to talk to this a little bit",
    "start": 1154
  },
  {
    "content": "yeah exactly so this happens all the time right",
    "start": 1158
  },
  {
    "content": "dashboard may want to have access to users so would billing",
    "start": 1161
  },
  {
    "content": "and so would all the other components right so in",
    "start": 1166
  },
  {
    "content": "especially in an app like paypal most of the",
    "start": 1169
  },
  {
    "content": "flows are authenticated you have to log in to see everything so",
    "start": 1172
  },
  {
    "content": "everybody needs access to users so what ends up happening is that everybody",
    "start": 1177
  },
  {
    "content": "starts calling users and then based on like billing gets",
    "start": 1181
  },
  {
    "content": "called a lot and maybe there is an authentication",
    "start": 1185
  },
  {
    "content": "service that gets called a lot so instead of the the ideal law",
    "start": 1188
  },
  {
    "content": "model that we had at the top everybody starts calling every other service or",
    "start": 1193
  },
  {
    "content": "like one service gets called multiple times so this happens",
    "start": 1197
  },
  {
    "content": "quite often and what we found too with uh like on my on my team",
    "start": 1200
  },
  {
    "content": "um the dashboard so like the dashboard would have a different",
    "start": 1207
  },
  {
    "content": "like a different need so for billing it would only pull",
    "start": 1213
  },
  {
    "content": "a few things right but it came from a few different places",
    "start": 1217
  },
  {
    "content": "so there was like a a rest end point for billing",
    "start": 1220
  },
  {
    "content": "that was specifically for the dashboard they built like a bespoke endpoint",
    "start": 1224
  },
  {
    "content": "and these were two different teams so there was a dashboard microservice that",
    "start": 1229
  },
  {
    "content": "actually showed the dashboard and then there was like a billing microservice",
    "start": 1232
  },
  {
    "content": "and these teams one team was in china and one team was in toronto",
    "start": 1236
  },
  {
    "content": "and so for those teams to work together they they had to like write up a spec",
    "start": 1239
  },
  {
    "content": "and then send it back and forth and then the back end team made some changes",
    "start": 1243
  },
  {
    "content": "and then they would ship their rest end point and like then the dashboard team",
    "start": 1247
  },
  {
    "content": "would would use that but then the billing team they needed a",
    "start": 1250
  },
  {
    "content": "bunch of information from billing so they had to do the same thing they",
    "start": 1254
  },
  {
    "content": "wrote up a spec billing wrote up this this custom endpoint and now billing had",
    "start": 1257
  },
  {
    "content": "you know 30 40 50 bespoke endpoints that each service needed to use",
    "start": 1262
  },
  {
    "content": "and there was no like there was no way to validate whether or",
    "start": 1267
  },
  {
    "content": "not any of them were still in use we couldn't",
    "start": 1272
  },
  {
    "content": "sunset things we couldn't remove data there was no visibility into what was",
    "start": 1274
  },
  {
    "content": "going on right and so this it was growing out of control we just we",
    "start": 1278
  },
  {
    "content": "were like i don't know does stuff break i guess let's just turn it off in",
    "start": 1281
  },
  {
    "content": "staging and see if anybody calls us yeah that happens all the time right",
    "start": 1284
  },
  {
    "content": "like that's why we have versioning in api so like we don't know",
    "start": 1289
  },
  {
    "content": "if this field is being used or not so instead of removing a field in this",
    "start": 1292
  },
  {
    "content": "version let's create another version of the api so we have v2 and v3 and at",
    "start": 1296
  },
  {
    "content": "some point we have like v150 and and so on we're in that versioning hell",
    "start": 1301
  },
  {
    "content": "yeah and it's it's like the worst um and it just creates all this pain right",
    "start": 1307
  },
  {
    "content": "where the back end teams are frustrated",
    "start": 1313
  },
  {
    "content": "because they feel like the front end teams",
    "start": 1315
  },
  {
    "content": "aren't um like the front end teams just ask for whatever they need so it",
    "start": 1317
  },
  {
    "content": "feels very much like getting yanked around front end's like well we need to",
    "start": 1322
  },
  {
    "content": "show this now so you need to give us a new endpoint",
    "start": 1325
  },
  {
    "content": "front end is frustrated because they're like well we know this data exists but",
    "start": 1327
  },
  {
    "content": "we don't want to have to call 50 rest apis",
    "start": 1330
  },
  {
    "content": "to load the data that we need because that's super slow um",
    "start": 1333
  },
  {
    "content": "and whenever they end up doing that that's how you end up with these proxy",
    "start": 1337
  },
  {
    "content": "apis where you're like i'm going to call a bunch of apis and",
    "start": 1340
  },
  {
    "content": "then i'm going to do business logic on my front end",
    "start": 1342
  },
  {
    "content": "to assemble this data into something i can use and then my front end's going to",
    "start": 1345
  },
  {
    "content": "call my change data and so now you've got",
    "start": 1348
  },
  {
    "content": "these like links in the chain and they're all really fragile your friend",
    "start": 1352
  },
  {
    "content": "is calling a custom api your custom api is calling a bunch of",
    "start": 1355
  },
  {
    "content": "custom apis and those are all hooked up to databases that",
    "start": 1358
  },
  {
    "content": "you know they don't really know what you're doing or how you're using it so",
    "start": 1362
  },
  {
    "content": "they might just accidentally break it at any point",
    "start": 1365
  },
  {
    "content": "um and you know then when it breaks you have no idea wow",
    "start": 1368
  },
  {
    "content": "there's so many hops right like how do you debug that",
    "start": 1372
  },
  {
    "content": "and sometimes what happens is like you have these multi layers of proxy apis",
    "start": 1375
  },
  {
    "content": "you have like users that's been called by",
    "start": 1379
  },
  {
    "content": "everything upstream and then the upstream service itself is calling five",
    "start": 1381
  },
  {
    "content": "other downstream services so how you have like this",
    "start": 1385
  },
  {
    "content": "layers of apis being called multiple downstreams",
    "start": 1387
  },
  {
    "content": "yeah and and i think that this is um so this is what",
    "start": 1392
  },
  {
    "content": "like this is i think something that if you've worked at a big company you may",
    "start": 1399
  },
  {
    "content": "be familiar with this this may look like something that you've",
    "start": 1402
  },
  {
    "content": "dealt with before so we're not here to just talk crap we're",
    "start": 1405
  },
  {
    "content": "here to we're here to show like maybe what's",
    "start": 1409
  },
  {
    "content": "better so if you were gonna try to sort this out how do you untangle",
    "start": 1412
  },
  {
    "content": "this what do you how do you do it yeah so the first thing",
    "start": 1416
  },
  {
    "content": "i would start looking into is when we call this proxy api which",
    "start": 1421
  },
  {
    "content": "service are we calling right are we calling users like three times",
    "start": 1425
  },
  {
    "content": "are we calling in apps and then let's see here right so billing is also",
    "start": 1428
  },
  {
    "content": "calling billing an app so that looks like that one common service is being",
    "start": 1433
  },
  {
    "content": "called everywhere so there is uh some place we",
    "start": 1437
  },
  {
    "content": "can optimize there um also if we have like users being",
    "start": 1441
  },
  {
    "content": "called by dashboard and users is being called by billing",
    "start": 1445
  },
  {
    "content": "we need to make sure that uh the data that we surface in dashboard",
    "start": 1448
  },
  {
    "content": "and the data that we surface in billing is sufficient enough for both of them",
    "start": 1452
  },
  {
    "content": "so we shouldn't be like creating multiple endpoints every time we have a",
    "start": 1456
  },
  {
    "content": "new customer um which is typically what we have to do",
    "start": 1460
  },
  {
    "content": "in rest so what happens is like we'll have this",
    "start": 1463
  },
  {
    "content": "file where we have a bunch of different endpoints and then what ends up",
    "start": 1466
  },
  {
    "content": "happening is some of those endpoints are not getting used anymore",
    "start": 1469
  },
  {
    "content": "yeah and so if we want to fix that like if we just kind of imagine a",
    "start": 1474
  },
  {
    "content": "perfect world right so let's let's take this over here and let's just",
    "start": 1480
  },
  {
    "content": "imagine a way to make this all better so i'm going to take these",
    "start": 1483
  },
  {
    "content": "arrows out and i'm going to take this proxy api out",
    "start": 1486
  },
  {
    "content": "because those are the things that make us sad so let's",
    "start": 1490
  },
  {
    "content": "show something that would make us happy and i'm going to take this",
    "start": 1493
  },
  {
    "content": "bring it over here and let's just say like",
    "start": 1497
  },
  {
    "content": "no i don't want come on mural oh my god stop why hello okay",
    "start": 1502
  },
  {
    "content": "unified data layer right and so then what we get with a unified data",
    "start": 1511
  },
  {
    "content": "layer is we have now something in between",
    "start": 1516
  },
  {
    "content": "where when we take this like our communication now becomes",
    "start": 1521
  },
  {
    "content": "completely um wait you're supposed to be copying right",
    "start": 1528
  },
  {
    "content": "now there you go uh it it becomes like very clear-cut we've",
    "start": 1533
  },
  {
    "content": "got this this is what we're doing with our",
    "start": 1538
  },
  {
    "content": "this is gonna be the it's i should we should have used excalidra i think",
    "start": 1542
  },
  {
    "content": "um i saw that come up in chat and i the only reason i didn't is because i don't",
    "start": 1549
  },
  {
    "content": "think excalibur is multiplayer um and i wanted uh shruti to be able to",
    "start": 1552
  },
  {
    "content": "to make changes in here but so if we look at this like now each",
    "start": 1557
  },
  {
    "content": "of these the dashboard is going to call the",
    "start": 1561
  },
  {
    "content": "unified data layer and say give me everything i need about users billing",
    "start": 1564
  },
  {
    "content": "and apps and the in the billing is going to do",
    "start": 1567
  },
  {
    "content": "the same thing and then the unified data layer just",
    "start": 1570
  },
  {
    "content": "knows in the back how to get to users billing and apps um and so this",
    "start": 1572
  },
  {
    "content": "creates there are several things that are going to happen here and and this is",
    "start": 1578
  },
  {
    "content": "why it's important now the apps team they don't have to",
    "start": 1581
  },
  {
    "content": "worry about the 13 14 15 front end services that call",
    "start": 1587
  },
  {
    "content": "their their layer they only have to worry",
    "start": 1591
  },
  {
    "content": "about this one this is what they test this is what they",
    "start": 1593
  },
  {
    "content": "have to validate this is the team they have to notify",
    "start": 1596
  },
  {
    "content": "whenever something's going to change and these teams",
    "start": 1599
  },
  {
    "content": "when they need to find data they don't have to try to hunt down which",
    "start": 1602
  },
  {
    "content": "microservice provides the data that they want",
    "start": 1606
  },
  {
    "content": "because they know that all of the data is here",
    "start": 1608
  },
  {
    "content": "um and so this is like extremely exciting",
    "start": 1611
  },
  {
    "content": "in in my opinion uh exactly so it's like one place where everybody",
    "start": 1615
  },
  {
    "content": "can come and talk to me they don't need to worry about anything that goes",
    "start": 1621
  },
  {
    "content": "downstream hello hello to the corgis um",
    "start": 1625
  },
  {
    "content": "yeah oh and thank you for the sub jordan i appreciate that it's uh it's always",
    "start": 1630
  },
  {
    "content": "great to always great to get a corgi storm um so",
    "start": 1634
  },
  {
    "content": "shirty you were saying uh what was i saying we were talking",
    "start": 1637
  },
  {
    "content": "about the unified data layers the corgis uh yeah so there is this one",
    "start": 1642
  },
  {
    "content": "place that everybody can come and talk to",
    "start": 1649
  },
  {
    "content": "and then um anything below that so it's kind of like a black box right anything",
    "start": 1651
  },
  {
    "content": "that that goes below that you as a front-end",
    "start": 1655
  },
  {
    "content": "developer or the team that writes the dashboard application doesn't need to",
    "start": 1657
  },
  {
    "content": "worry about it so the unified data team or the com",
    "start": 1661
  },
  {
    "content": "the team that owns that component can take care of that",
    "start": 1663
  },
  {
    "content": "call users and billing and do their own performance optimizations to",
    "start": 1667
  },
  {
    "content": "make like one call instead of doing multiple calls to those apis",
    "start": 1671
  },
  {
    "content": "so you're kind of now con separating the concern of",
    "start": 1675
  },
  {
    "content": "uh performance on the back end and performance on the front end",
    "start": 1678
  },
  {
    "content": "and and the other thing that's exciting about it too that i that i think is",
    "start": 1682
  },
  {
    "content": "is so powerful is like when we're talking about like any api",
    "start": 1686
  },
  {
    "content": "design monoliths are very exciting when it's",
    "start": 1693
  },
  {
    "content": "you know when you're trying to just build something because it's like",
    "start": 1696
  },
  {
    "content": "well everything's in one place i'm trying to limit the cognitive overhead",
    "start": 1700
  },
  {
    "content": "and and limit the amount of things that i have to keep in my head but as",
    "start": 1703
  },
  {
    "content": "you scale having everything in one place like you",
    "start": 1707
  },
  {
    "content": "can't track a million lines of code you can't keep that context in your head",
    "start": 1710
  },
  {
    "content": "so then you start to cognitively you know shift you're like okay well the",
    "start": 1715
  },
  {
    "content": "easiest way to keep track of this is to break it into pieces that are small",
    "start": 1719
  },
  {
    "content": "enough that i can keep the context in my head",
    "start": 1722
  },
  {
    "content": "and so you go to microservices and then you have a smaller number of lines of",
    "start": 1724
  },
  {
    "content": "code but the problem is you don't eliminate",
    "start": 1728
  },
  {
    "content": "that context you still need to know how the microservices interact with every",
    "start": 1731
  },
  {
    "content": "other microservice because there's so much interdependency",
    "start": 1735
  },
  {
    "content": "you've you've created this like it's a it's a strong tie between",
    "start": 1738
  },
  {
    "content": "microservices and and that means you haven't actually eliminated the context",
    "start": 1743
  },
  {
    "content": "you just spread the code out you go this way you get to this unified data layer",
    "start": 1747
  },
  {
    "content": "you've eliminated context you no longer need to know",
    "start": 1753
  },
  {
    "content": "how everything else uses the data because you're not the person",
    "start": 1757
  },
  {
    "content": "you're not the service providing that data you are",
    "start": 1761
  },
  {
    "content": "giving that data to a single place you've created a very clear boundary",
    "start": 1764
  },
  {
    "content": "between your microservice and everything else",
    "start": 1768
  },
  {
    "content": "and as long as you honor whatever that single contract is between your service",
    "start": 1771
  },
  {
    "content": "and the unified data layer that's all the context you need and that is",
    "start": 1775
  },
  {
    "content": "so powerful exactly um but yeah so so if we want to make",
    "start": 1781
  },
  {
    "content": "this unified data layer how would you do it so this",
    "start": 1789
  },
  {
    "content": "is a perfect place for graphql um graphql is this unified data layer where",
    "start": 1794
  },
  {
    "content": "you establish a contract with the backend folks and the frontend",
    "start": 1800
  },
  {
    "content": "folks and decide upfront which what data needs to be uh",
    "start": 1804
  },
  {
    "content": "surfaced and you're not tied just to the just to doing this up front you can also",
    "start": 1809
  },
  {
    "content": "as you go through the progress through the through the project if you",
    "start": 1814
  },
  {
    "content": "have new data that you need to add you can add it to the schema and one",
    "start": 1817
  },
  {
    "content": "thing that graphql is really good at is providing you",
    "start": 1822
  },
  {
    "content": "ability to see which fields are being used",
    "start": 1825
  },
  {
    "content": "and you can know exactly what field is being used and not just like what method",
    "start": 1828
  },
  {
    "content": "is being used so that's really helpful and that helps in like let's say you",
    "start": 1832
  },
  {
    "content": "have you have users and you have a five different fields that are not",
    "start": 1837
  },
  {
    "content": "being used anymore you can mark them as deprecated",
    "start": 1841
  },
  {
    "content": "and that can go uh that you can remove in the next",
    "start": 1844
  },
  {
    "content": "phase but any client would if they were using that deprecated field they would",
    "start": 1848
  },
  {
    "content": "know that this fuel is going to go away so you know that this field is not being",
    "start": 1852
  },
  {
    "content": "used you have data on it that you can see you can",
    "start": 1856
  },
  {
    "content": "monitor it and you can redo you can remove that",
    "start": 1859
  },
  {
    "content": "field if need be instead of like blindly versioning it or blindly removing that",
    "start": 1862
  },
  {
    "content": "field it and what i like about it too is it creates",
    "start": 1866
  },
  {
    "content": "like a fuzzy uh fuzzy upgrade as opposed to these",
    "start": 1869
  },
  {
    "content": "like hard v2 like we're shutting off v2 on on this",
    "start": 1873
  },
  {
    "content": "date and you have to migrate all your",
    "start": 1877
  },
  {
    "content": "endpoints it's like well no we're everything's going to keep working this",
    "start": 1879
  },
  {
    "content": "field is just going to start returning null so like your code",
    "start": 1883
  },
  {
    "content": "will still work you'll just be missing that data unless you start using the",
    "start": 1887
  },
  {
    "content": "updated field exactly so it's backward compatible to people or to applications",
    "start": 1890
  },
  {
    "content": "that have already interfaced and started working with the",
    "start": 1895
  },
  {
    "content": "apis yeah and it's it's just i like it i love",
    "start": 1898
  },
  {
    "content": "it and and this was something that we noticed that uh when i was trying to",
    "start": 1903
  },
  {
    "content": "roll it out on my team and it sounds like you've been",
    "start": 1905
  },
  {
    "content": "finding the same is like by putting this this layer in we're",
    "start": 1907
  },
  {
    "content": "eliminating just a tremendous amount of cognitive complexity so when it when a",
    "start": 1913
  },
  {
    "content": "team is using something like and and i think it's it's worth",
    "start": 1918
  },
  {
    "content": "maybe at this point um looking at some of the things that",
    "start": 1922
  },
  {
    "content": "make graphql exciting and i'm trying to think of a good example let's let's go",
    "start": 1925
  },
  {
    "content": "to how to graphql um and so how to graphql do they have a",
    "start": 1929
  },
  {
    "content": "playground in here that we can look at um i feel like they did at one point i'm",
    "start": 1934
  },
  {
    "content": "not sure if it's still around oh no oh",
    "start": 1940
  },
  {
    "content": "graphql itself let me see there's so uh well actually let's here's",
    "start": 1946
  },
  {
    "content": "one that i know exists um let's go to uh the rick and morty",
    "start": 1953
  },
  {
    "content": "api there is a a graphql rick and morty api",
    "start": 1961
  },
  {
    "content": "um that we can look at okay so i want to show you something",
    "start": 1967
  },
  {
    "content": "really like really cool just right out of the gate so check this out",
    "start": 1972
  },
  {
    "content": "so we've got the the rest api and the the regular api so",
    "start": 1976
  },
  {
    "content": "i'm going to click this this is what you get when you go to a",
    "start": 1980
  },
  {
    "content": "rest api we have gotten our basic documentation we've got the",
    "start": 1983
  },
  {
    "content": "characters we've got the locations and the episodes so it tells us where to",
    "start": 1987
  },
  {
    "content": "go but it's not super helpful right so i'm okay i gotta",
    "start": 1990
  },
  {
    "content": "click in here i gotta look through here and i can see sort of what's going on",
    "start": 1995
  },
  {
    "content": "but look what happens when i pull up the graphql api",
    "start": 1999
  },
  {
    "content": "i'm looking at a ui right and if i open this i can see the schema",
    "start": 2002
  },
  {
    "content": "and we can see all right this is pretty computery i don't know if this is super",
    "start": 2006
  },
  {
    "content": "helpful to me but like let's look at the docs",
    "start": 2009
  },
  {
    "content": "okay this is interesting i can see a character",
    "start": 2013
  },
  {
    "content": "i can see that the character is going to give me an id and a name and things like",
    "start": 2016
  },
  {
    "content": "that okay so i can just try this i can go in",
    "start": 2020
  },
  {
    "content": "and i can say i want a character and like they've already",
    "start": 2023
  },
  {
    "content": "built a query for us so we can we can look at what's going on",
    "start": 2026
  },
  {
    "content": "um and so i can just play and notice that like remember when we",
    "start": 2029
  },
  {
    "content": "were here we were looking at characters so here's a character",
    "start": 2035
  },
  {
    "content": "and let's just pull one of these up okay so here is one character",
    "start": 2040
  },
  {
    "content": "and let's see his url is i think if we just go to like",
    "start": 2048
  },
  {
    "content": "character one yeah here's one all right so then what",
    "start": 2053
  },
  {
    "content": "we get back is like an episode and the episode includes",
    "start": 2057
  },
  {
    "content": "like a link it's not actually information",
    "start": 2060
  },
  {
    "content": "and then if we go down to the url okay that's that's kind of useful um but",
    "start": 2064
  },
  {
    "content": "what about like the location okay the location is earth",
    "start": 2071
  },
  {
    "content": "but there's just a url to it whereas in here i'm able to get like",
    "start": 2075
  },
  {
    "content": "here's the location here's the name here's what dimension it's in",
    "start": 2081
  },
  {
    "content": "here's an image um let's pull up episodes",
    "start": 2085
  },
  {
    "content": "so i'm going to look at episodes and then",
    "start": 2088
  },
  {
    "content": "inside of this i can see the name i can see what date it aired",
    "start": 2092
  },
  {
    "content": "so instead of like having to make chained rest api calls",
    "start": 2096
  },
  {
    "content": "i can just dig through this to figure out",
    "start": 2099
  },
  {
    "content": "what's there and i get all of that data back and i didn't need to go read the",
    "start": 2103
  },
  {
    "content": "docs for that i was able to just look at these embedded api docs to",
    "start": 2106
  },
  {
    "content": "figure out that there was stuff that i wanted here i could go see all right",
    "start": 2111
  },
  {
    "content": "here's the episode and i want this information and i can",
    "start": 2114
  },
  {
    "content": "test these queries and if i want to use this in my app i",
    "start": 2118
  },
  {
    "content": "can literally copy paste that into my code and it just works so",
    "start": 2121
  },
  {
    "content": "this as a front-end developer changed everything for me",
    "start": 2125
  },
  {
    "content": "yeah and what's cool is like they didn't have to build this documentation",
    "start": 2130
  },
  {
    "content": "themselves like by writing it down this automatically gets",
    "start": 2134
  },
  {
    "content": "generated for you so that's super helpful so",
    "start": 2136
  },
  {
    "content": "it's something that happens in the background so i don't have to",
    "start": 2139
  },
  {
    "content": "consciously think about writing documentation that's",
    "start": 2141
  },
  {
    "content": "up to date mm-hmm and it's yeah it's it's really really cool and then if we",
    "start": 2143
  },
  {
    "content": "go and look at um let's like actually let's look at how",
    "start": 2149
  },
  {
    "content": "to graph ql again so we can we can dig into some of the basics um",
    "start": 2152
  },
  {
    "content": "i think we can see i just want to see yeah here's here's a graphql type",
    "start": 2157
  },
  {
    "content": "so i'm able to just say like i want my data to have",
    "start": 2164
  },
  {
    "content": "people in it and i want a person to have a name",
    "start": 2167
  },
  {
    "content": "and an age and i know that that's required which is why i've got this",
    "start": 2171
  },
  {
    "content": "exclamation point and this one's going to be a string this",
    "start": 2174
  },
  {
    "content": "one's going to be an integer this is i mean it's not exactly human",
    "start": 2177
  },
  {
    "content": "readable but it's it's more human readable to me than a",
    "start": 2184
  },
  {
    "content": "lot of code um where i can sort of deduce what",
    "start": 2186
  },
  {
    "content": "things are like i know what a type is i know what a",
    "start": 2190
  },
  {
    "content": "person is and as i kind of look around i can",
    "start": 2193
  },
  {
    "content": "i can mostly figure out what this stuff means and then",
    "start": 2196
  },
  {
    "content": "you can see that we start linking things together so we've got a person",
    "start": 2199
  },
  {
    "content": "and that person writes posts and when you search for posts you get an array",
    "start": 2203
  },
  {
    "content": "of this post type that's up here so we can start to see how this all",
    "start": 2207
  },
  {
    "content": "links together we get this web and this is the definition that i would write to",
    "start": 2211
  },
  {
    "content": "make a graphql api and then that definition gets read",
    "start": 2216
  },
  {
    "content": "in here right so here are the actual uh types for the characters for episodes",
    "start": 2221
  },
  {
    "content": "and all those things so when i look at a character i can see that i'll get an",
    "start": 2228
  },
  {
    "content": "array of episodes back and i know that that's going to have",
    "start": 2231
  },
  {
    "content": "these data this data so when i go into look here",
    "start": 2234
  },
  {
    "content": "here's my episode and here's what comes back with it like this all",
    "start": 2238
  },
  {
    "content": "it's very logical and that allows you to do things like autocomplete like i'm",
    "start": 2241
  },
  {
    "content": "hitting ctrl space and it pulls up all of the available",
    "start": 2246
  },
  {
    "content": "fields because it's explorable like that and this is this is just compared to",
    "start": 2249
  },
  {
    "content": "using something like rest like you can do this with rest you absolutely can",
    "start": 2255
  },
  {
    "content": "but you can't not do this with graphql whereas with rest there's a bunch of",
    "start": 2259
  },
  {
    "content": "extra tools you have to add and you get it for free right so you",
    "start": 2264
  },
  {
    "content": "don't have to put an extra effort for that",
    "start": 2267
  },
  {
    "content": "yeah it's like it's truly um this this to me is is extremely exciting",
    "start": 2272
  },
  {
    "content": "and i think that it's um like it it just opens a lot of doors and",
    "start": 2278
  },
  {
    "content": "then so like but that's so now we're talking about it from the",
    "start": 2283
  },
  {
    "content": "the front end right so from the front inside this is kind of a dream",
    "start": 2286
  },
  {
    "content": "because i as a as a dashboard developer i'm just going to go to mycompany.com",
    "start": 2289
  },
  {
    "content": "graphql and i get this explorable api i'm going to",
    "start": 2294
  },
  {
    "content": "you know and we we can do authentication so i'm gonna send like my authentication",
    "start": 2298
  },
  {
    "content": "token that says i'm authorized to read from this data",
    "start": 2301
  },
  {
    "content": "and now i can just explore the whole database of the entire company",
    "start": 2304
  },
  {
    "content": "and see all of the data from all of the microservices and build",
    "start": 2308
  },
  {
    "content": "the custom query i need to pull just what i'm going to use",
    "start": 2312
  },
  {
    "content": "and then i get to build my ui with it that's amazing",
    "start": 2316
  },
  {
    "content": "and cool thing is like you need to pass in that json that",
    "start": 2320
  },
  {
    "content": "authentication token once right so what happens usually is that if you have five",
    "start": 2324
  },
  {
    "content": "services you'll have to pass that uh token multiple times",
    "start": 2328
  },
  {
    "content": "but with graphql because you have this one place you're talking to you only",
    "start": 2331
  },
  {
    "content": "need to pass your token once yeah and in like",
    "start": 2334
  },
  {
    "content": "just so much complexity disappears right um",
    "start": 2340
  },
  {
    "content": "actually i have a very good example of this i don't know if every once in a",
    "start": 2344
  },
  {
    "content": "while sean grove is on the call i don't know if",
    "start": 2346
  },
  {
    "content": "he's here right now but i'm gonna i'm gonna show off his product for a",
    "start": 2349
  },
  {
    "content": "minute um so this is a uh",
    "start": 2352
  },
  {
    "content": "let me see yeah so this is this is like a",
    "start": 2358
  },
  {
    "content": "product called one graph which is just kind of a nice graphql interface",
    "start": 2361
  },
  {
    "content": "but it does this really interesting thing where",
    "start": 2365
  },
  {
    "content": "look at all of these services right so this is air table",
    "start": 2368
  },
  {
    "content": "box we've got egg head dribble mailchimp all sorts of stuff is in here",
    "start": 2372
  },
  {
    "content": "and as a as a user i want to be able to just like",
    "start": 2377
  },
  {
    "content": "pull some stuff together so i'm i'm in this explorer tab so i'm",
    "start": 2381
  },
  {
    "content": "gonna let's pull up some information about me",
    "start": 2384
  },
  {
    "content": "uh let's pull up my twitch uh twitch is gonna make me do some weird",
    "start": 2386
  },
  {
    "content": "stuff let's do some some different stuff let's get uh github that's an easy one",
    "start": 2391
  },
  {
    "content": "so i'm gonna get my github and i can pull",
    "start": 2395
  },
  {
    "content": "in like my meta or i want repository let's pull up",
    "start": 2398
  },
  {
    "content": "any repository and okay they they pulled one up for me",
    "start": 2406
  },
  {
    "content": "okay well look i now i need to log into github so",
    "start": 2413
  },
  {
    "content": "i just click this button i'm now logged into github",
    "start": 2416
  },
  {
    "content": "i can run this call and i'm pulling in information about graphql and then if i",
    "start": 2421
  },
  {
    "content": "go to this like me tab um i can do some just like and i'm not",
    "start": 2425
  },
  {
    "content": "showing this to show off one graph i'm i'm",
    "start": 2430
  },
  {
    "content": "showing this to show off the the power of graphql because all of this",
    "start": 2433
  },
  {
    "content": "information is a single graphql layer so when i'm in",
    "start": 2437
  },
  {
    "content": "here i'm pulling up like my github information",
    "start": 2440
  },
  {
    "content": "i can so i can get my avatar url my bio and let's pull up my i don't know like",
    "start": 2444
  },
  {
    "content": "uh my logo file instead of profile picture",
    "start": 2452
  },
  {
    "content": "so got that and then if i want to pull up my",
    "start": 2458
  },
  {
    "content": "netlify i can pull up my um my full name right and i can probably",
    "start": 2464
  },
  {
    "content": "pull some extra stuff but i won't uh and so now i need to log into netlify",
    "start": 2471
  },
  {
    "content": "okay i'm logged into netlify and now i can pull this up and like",
    "start": 2477
  },
  {
    "content": "just you know check this out so i'm i'm now pulling data",
    "start": 2481
  },
  {
    "content": "from github and netlify in a single api call",
    "start": 2485
  },
  {
    "content": "and so these are completely different companies they're not",
    "start": 2489
  },
  {
    "content": "this isn't like microservices in a team this is like",
    "start": 2492
  },
  {
    "content": "completely separate entities and we still get this unified",
    "start": 2495
  },
  {
    "content": "api experience where it's explorable i can just click around and decide a thing",
    "start": 2499
  },
  {
    "content": "i want and click into it and get it um yeah and",
    "start": 2503
  },
  {
    "content": "they all may not even be graphql apis they could all probably be",
    "start": 2507
  },
  {
    "content": "rest apis or a combination of graphql or rust api they don't have to be a graphql",
    "start": 2510
  },
  {
    "content": "or a single type of api exactly i mean it's exactly that right",
    "start": 2514
  },
  {
    "content": "and i think that that's it's just so it's unbelievably cool how",
    "start": 2519
  },
  {
    "content": "powerful this stuff is um because graphql is just an",
    "start": 2523
  },
  {
    "content": "abstraction over the top of data that makes it easier for front ends to",
    "start": 2527
  },
  {
    "content": "get to that data um and that like that means that you",
    "start": 2531
  },
  {
    "content": "know we're able to here we are we're logged in it looks",
    "start": 2535
  },
  {
    "content": "like i'm logged in as my twitch bot not as me but",
    "start": 2538
  },
  {
    "content": "i have um i have access to like three completely separate data sources",
    "start": 2540
  },
  {
    "content": "and all i had to do was provide the tokens and those",
    "start": 2545
  },
  {
    "content": "those tokens are are in here you can see which ones you're logged into",
    "start": 2548
  },
  {
    "content": "but like when you look at at you know a an enterprise service",
    "start": 2551
  },
  {
    "content": "this is the most enterprise thing i can imagine is like how do we string",
    "start": 2556
  },
  {
    "content": "together completely different companies as opposed to teams because you're not",
    "start": 2560
  },
  {
    "content": "going to get github to communicate with one graph to",
    "start": 2565
  },
  {
    "content": "provide data you're not going to get netlify and",
    "start": 2569
  },
  {
    "content": "twitch to talk to each other to determine whether or not the data",
    "start": 2572
  },
  {
    "content": "that they're sending is the right data this graphql layer removes the need for",
    "start": 2576
  },
  {
    "content": "that entirely i as a front-end developer can just go",
    "start": 2580
  },
  {
    "content": "and look at this one thing and i never i will never speak to people",
    "start": 2584
  },
  {
    "content": "who work on the teams behind this data most likely",
    "start": 2588
  },
  {
    "content": "but i can still use it i can still access it um",
    "start": 2591
  },
  {
    "content": "and so we can take that that idea and we can roll that into our enterprise apps",
    "start": 2595
  },
  {
    "content": "and now we've we've created not like a separation like oh front end and back",
    "start": 2599
  },
  {
    "content": "end should never mix they're they're you know they don't need to",
    "start": 2604
  },
  {
    "content": "communicate but we eliminate the noise of like well i need a bespoke end point",
    "start": 2606
  },
  {
    "content": "i need you to to update this thing so that i can make my front end different",
    "start": 2611
  },
  {
    "content": "or you need to change the front end so that we can fix this problem in the back",
    "start": 2615
  },
  {
    "content": "end all of that like back and forth goes",
    "start": 2618
  },
  {
    "content": "away and instead you can talk about what would make our product better",
    "start": 2621
  },
  {
    "content": "what can what can we build and how could you use it as opposed to please fix our",
    "start": 2624
  },
  {
    "content": "problems exactly um okay",
    "start": 2629
  },
  {
    "content": "so i feel like the the graphql side of things is",
    "start": 2635
  },
  {
    "content": "super super exciting and it opens up a huge amount of doors",
    "start": 2639
  },
  {
    "content": "what what are the the tricky like what's the other half of this right",
    "start": 2643
  },
  {
    "content": "so let's go back in here and let's think about like",
    "start": 2648
  },
  {
    "content": "how can we make this better if we wanted to take it further",
    "start": 2653
  },
  {
    "content": "yeah so let's see where we are um we have figured out a unified data layer so",
    "start": 2657
  },
  {
    "content": "we're going to make your graphql so that means we're going to fetch less",
    "start": 2662
  },
  {
    "content": "data right now the question is we still have these",
    "start": 2666
  },
  {
    "content": "separate apps so let's maybe dive into the architecture of these apps see what",
    "start": 2670
  },
  {
    "content": "they are so typically",
    "start": 2676
  },
  {
    "content": "let's see we had this at the top we had a",
    "start": 2680
  },
  {
    "content": "node layer i believe uh oh we haven't uh we didn't look into the front end we",
    "start": 2683
  },
  {
    "content": "haven't really looked at the front end okay",
    "start": 2689
  },
  {
    "content": "let's do that uh do you want me to do it or do you want to works",
    "start": 2691
  },
  {
    "content": "uh you can do it okay so yeah i'm a mural pro i've been using it",
    "start": 2695
  },
  {
    "content": "for a whole 18 minutes i'm ready um so let's expand one of these out and",
    "start": 2700
  },
  {
    "content": "let's let's think about what goes into this billing service",
    "start": 2704
  },
  {
    "content": "um i just realized i think i've had coffee in my mustache for like this",
    "start": 2707
  },
  {
    "content": "whole show and that is gross sorry i hope that that",
    "start": 2710
  },
  {
    "content": "wasn't like visible in the video until uh said it okay",
    "start": 2714
  },
  {
    "content": "so inside of this we're gonna need um like we've got our our actual like",
    "start": 2721
  },
  {
    "content": "what goes into the the front end code so the html",
    "start": 2728
  },
  {
    "content": "css and client-side js that goes in here and so this is going",
    "start": 2732
  },
  {
    "content": "to be something like maybe react view angular",
    "start": 2738
  },
  {
    "content": "whatever um you know any any front end that you want to use",
    "start": 2745
  },
  {
    "content": "is gonna is gonna be part of this and then you also have",
    "start": 2749
  },
  {
    "content": "your like data loading right and so this would be like maybe",
    "start": 2753
  },
  {
    "content": "it's um",
    "start": 2760
  },
  {
    "content": "well okay so we should probably talk about this in a couple ways right",
    "start": 2764
  },
  {
    "content": "because we can we can do this a few ways there's",
    "start": 2766
  },
  {
    "content": "there's going to be something that serves your web app",
    "start": 2770
  },
  {
    "content": "right so we've got a server and then we also have",
    "start": 2777
  },
  {
    "content": "a like data connection um and then like thing that calls",
    "start": 2781
  },
  {
    "content": "the api yeah and this is what connects to the graphql",
    "start": 2789
  },
  {
    "content": "unified layer to the unified",
    "start": 2793
  },
  {
    "content": "data layer okay so all of that lives inside of this",
    "start": 2808
  },
  {
    "content": "like billing bubble right and so i'm gonna put these side by side so that",
    "start": 2815
  },
  {
    "content": "they don't uh like overlap but",
    "start": 2820
  },
  {
    "content": "basically this is one front end um and so we need to answer",
    "start": 2824
  },
  {
    "content": "these questions and we can do these a bunch of ways uh",
    "start": 2828
  },
  {
    "content": "so the typical way that you would end up doing this is through some kind of",
    "start": 2831
  },
  {
    "content": "um like node php java",
    "start": 2837
  },
  {
    "content": "whatever like you're you're going to have some kind of running server that",
    "start": 2845
  },
  {
    "content": "when a request comes in you're going to uh determine how to",
    "start": 2848
  },
  {
    "content": "handle that and return the appropriate front-end files um",
    "start": 2852
  },
  {
    "content": "so that's good in a lot of ways like it you know we can do things like if",
    "start": 2859
  },
  {
    "content": "uh if billing comes in with parameters we've got you know user",
    "start": 2863
  },
  {
    "content": "uh project or something like that where we can pull in",
    "start": 2867
  },
  {
    "content": "this url and say okay when somebody hits the billing route we want to send it to",
    "start": 2871
  },
  {
    "content": "this server that server says okay well what's the",
    "start": 2874
  },
  {
    "content": "user id from the url what's the project id from the url",
    "start": 2877
  },
  {
    "content": "send off the request to get that data and then send me back",
    "start": 2880
  },
  {
    "content": "the data that i need and then it builds the html css javascript and sends that",
    "start": 2885
  },
  {
    "content": "to the to the browser um that's",
    "start": 2888
  },
  {
    "content": "good like it does the job so what are the challenges here",
    "start": 2892
  },
  {
    "content": "well one good thing that i also wanted to mention is that because you have",
    "start": 2897
  },
  {
    "content": "access and control over the server let's say",
    "start": 2900
  },
  {
    "content": "if you want to show multiple like for example you want to do a b testing you",
    "start": 2904
  },
  {
    "content": "know what user it is now because you have control over how",
    "start": 2908
  },
  {
    "content": "you render that html because that's built",
    "start": 2912
  },
  {
    "content": "on the fly uh you can do a b testing very easily right so for user a you show",
    "start": 2914
  },
  {
    "content": "a page user b if you show b flow and so on the server side you can",
    "start": 2918
  },
  {
    "content": "control which flow you want to show to which user",
    "start": 2923
  },
  {
    "content": "yeah and and you would end up doing that",
    "start": 2926
  },
  {
    "content": "through what like cookies or sessions or or something yeah you can do",
    "start": 2928
  },
  {
    "content": "it a bunch of ways yeah exactly um so",
    "start": 2934
  },
  {
    "content": "the challenges to this like where have you seen this",
    "start": 2939
  },
  {
    "content": "start to break down yeah so the challenge is let's say that you have",
    "start": 2942
  },
  {
    "content": "uh let's say we fix the data that we're pulling we're always putting constant",
    "start": 2947
  },
  {
    "content": "amount of data um we've fixed our back in layers our",
    "start": 2951
  },
  {
    "content": "back end is not a bottleneck anymore um every time the user requests a page",
    "start": 2954
  },
  {
    "content": "we have to rebuild our html because we only have react on the server",
    "start": 2960
  },
  {
    "content": "side right so we have react components we're going to",
    "start": 2966
  },
  {
    "content": "build html on this on the on demand really so that slows down",
    "start": 2968
  },
  {
    "content": "the time it takes to completely render the whole page",
    "start": 2974
  },
  {
    "content": "and make the web app usable um yeah and so we're we're basically",
    "start": 2978
  },
  {
    "content": "like instead of just being able someone being able to say i would like this page",
    "start": 2988
  },
  {
    "content": "and being here's your page it's i would like this page it's like which page is",
    "start": 2991
  },
  {
    "content": "that okay let me go ask the server okay server you go ask the database",
    "start": 2995
  },
  {
    "content": "okay let's show them that page um yeah and then let me",
    "start": 2998
  },
  {
    "content": "let me finish building this let me finish rendering this and now i'm ready",
    "start": 3002
  },
  {
    "content": "to give it to you yeah yes um and then most times like",
    "start": 3005
  },
  {
    "content": "let's say if you have this billing app right most times the user is requesting",
    "start": 3012
  },
  {
    "content": "the same page or most user requesting the same page over and over again",
    "start": 3016
  },
  {
    "content": "maybe one or two fields would change but usually",
    "start": 3020
  },
  {
    "content": "it's the same skeleton over and over again that most users",
    "start": 3024
  },
  {
    "content": "are fetching for so we are building the same kind of page multiple times for",
    "start": 3028
  },
  {
    "content": "multiple users yeah um and that's like this i think is",
    "start": 3032
  },
  {
    "content": "is extremely common where you you find yourself kind of",
    "start": 3043
  },
  {
    "content": "90 of the app is always gonna either the headers gonna look the same you're just",
    "start": 3048
  },
  {
    "content": "gonna swap out the avatar in their name you the",
    "start": 3052
  },
  {
    "content": "the billing page all of the ui is going to look the same you're just swapping",
    "start": 3055
  },
  {
    "content": "out the data in the in the chart and like the you know the",
    "start": 3059
  },
  {
    "content": "email on the hello you're logged in as like you know that",
    "start": 3062
  },
  {
    "content": "exactly so um we can there's maybe like",
    "start": 3067
  },
  {
    "content": "one person or like ten percent of content that's dynamic but most of it is",
    "start": 3071
  },
  {
    "content": "it's the same content for every user yeah",
    "start": 3075
  },
  {
    "content": "and so the the way that we can think about this i'm gonna draw this really",
    "start": 3078
  },
  {
    "content": "poorly um is like if somebody's on their computer",
    "start": 3081
  },
  {
    "content": "right and then they're they're saying like please give me a web",
    "start": 3085
  },
  {
    "content": "page you're gonna go to a server right and that server",
    "start": 3088
  },
  {
    "content": "is gonna say um all right uh i need to get this page",
    "start": 3093
  },
  {
    "content": "so it goes and it gets the source code that's maybe the best thing i've ever",
    "start": 3098
  },
  {
    "content": "done um and then it's gonna go get the data",
    "start": 3105
  },
  {
    "content": "right that looks like a database um and then",
    "start": 3111
  },
  {
    "content": "once it has the data it's going to come back to the code",
    "start": 3115
  },
  {
    "content": "and it's going to actually compile that and then that all goes back",
    "start": 3120
  },
  {
    "content": "to the server which finally goes back to the user and so that's a lot of work",
    "start": 3123
  },
  {
    "content": "that has to be done and we're leaving things out we're leaving out",
    "start": 3129
  },
  {
    "content": "authentication we're leaving out um like if there is a caching layer if",
    "start": 3132
  },
  {
    "content": "there's a if there is a you know some kind of",
    "start": 3136
  },
  {
    "content": "chain of events if there's other stuff that's happening",
    "start": 3140
  },
  {
    "content": "a b testing all of those things are additional hops that are going to happen",
    "start": 3142
  },
  {
    "content": "um in this this chain of command that that like",
    "start": 3145
  },
  {
    "content": "this is all just time right yeah um so if we want to fix it that's for every",
    "start": 3150
  },
  {
    "content": "page right even for the same user anytime they browse a different url",
    "start": 3155
  },
  {
    "content": "you're doing this every single time exactly and so one way that we can",
    "start": 3159
  },
  {
    "content": "improve this is if we start looking at a um",
    "start": 3164
  },
  {
    "content": "like if we think about it as a uh what work can we do ahead of time like",
    "start": 3170
  },
  {
    "content": "what what can we do once versus what work do we have to do every",
    "start": 3176
  },
  {
    "content": "time and then it starts to create a different story and that's where we",
    "start": 3178
  },
  {
    "content": "start looking at the jam stack um and so the the jam stack is",
    "start": 3182
  },
  {
    "content": "uh is pretty exciting in this sense like i think i've already drawn this graphic",
    "start": 3187
  },
  {
    "content": "before so rather than trying to to come up with it on the spot i'm gonna",
    "start": 3192
  },
  {
    "content": "just show this graphic um see it's down here so",
    "start": 3196
  },
  {
    "content": "this let me zoom in a little this is uh what i was just trying to draw so you've",
    "start": 3201
  },
  {
    "content": "got the browser the browser has to go to the server the server has to go to the",
    "start": 3206
  },
  {
    "content": "database or an api all that has to go through a template",
    "start": 3209
  },
  {
    "content": "which then turns into static assets that gets sent back to the",
    "start": 3212
  },
  {
    "content": "browser when we go to the jam stack model what we're able to do",
    "start": 3215
  },
  {
    "content": "is ahead of time we have a build step where",
    "start": 3220
  },
  {
    "content": "we know the pages that are going to exist so we go to a server",
    "start": 3223
  },
  {
    "content": "and then from that server the server goes to the",
    "start": 3228
  },
  {
    "content": "database and the api and it gets the templates and then that",
    "start": 3231
  },
  {
    "content": "generates a big folder of static assets but because we know that those pages",
    "start": 3234
  },
  {
    "content": "don't change between requests the browser then says",
    "start": 3239
  },
  {
    "content": "i would like a page and it immediately gets that static asset back",
    "start": 3244
  },
  {
    "content": "and so we're able to kind of preemptively say",
    "start": 3248
  },
  {
    "content": "well we know that the account page like skeleton",
    "start": 3252
  },
  {
    "content": "is always the same we know that the the marketing page",
    "start": 3256
  },
  {
    "content": "is always the same no matter who's looking at it we know that like the",
    "start": 3260
  },
  {
    "content": "you know the dashboard page or the marketplace pages those are all going to",
    "start": 3264
  },
  {
    "content": "be largely the same no matter who's looking at them and we",
    "start": 3268
  },
  {
    "content": "can generate all that ahead of time um so another example is documentation",
    "start": 3271
  },
  {
    "content": "pages they have a change yes um",
    "start": 3277
  },
  {
    "content": "they should change they never change yeah yes absolutely um",
    "start": 3281
  },
  {
    "content": "but so what i think is is oh actually there's a good question in",
    "start": 3289
  },
  {
    "content": "chat let me read this out loud um so in a way this is shifting some of the",
    "start": 3294
  },
  {
    "content": "cost of computation from the company servers to the user's devices",
    "start": 3299
  },
  {
    "content": "uh i actually i think i would disagree with that",
    "start": 3303
  },
  {
    "content": "um i think that this this other way here where we've got the whole app is kind of",
    "start": 3307
  },
  {
    "content": "like a single page app where everything is",
    "start": 3314
  },
  {
    "content": "is living in the client um that can but what we're trying to get away from",
    "start": 3316
  },
  {
    "content": "is we're trying to get away from doing duplicate work at all",
    "start": 3323
  },
  {
    "content": "like if you if you use the jam stack approach",
    "start": 3326
  },
  {
    "content": "what we're trying to get to is like here is some html",
    "start": 3329
  },
  {
    "content": "it's not work you're not gonna like download this and then do a bunch of",
    "start": 3333
  },
  {
    "content": "processing on your device you're just gonna download it and look",
    "start": 3337
  },
  {
    "content": "at it and that's what makes it so fast if you",
    "start": 3340
  },
  {
    "content": "if you look at like the average you know 11d site or something",
    "start": 3342
  },
  {
    "content": "those just compile down to html and css for the most part",
    "start": 3346
  },
  {
    "content": "and that makes them really fast like they you know let's like",
    "start": 3350
  },
  {
    "content": "if we look up at the 11th site this is not being built by",
    "start": 3357
  },
  {
    "content": "the browser it's not being rendered by javascript this is just",
    "start": 3361
  },
  {
    "content": "html we if we look at the source we can see like",
    "start": 3364
  },
  {
    "content": "this that's here this is what was generated and this is what was stored on",
    "start": 3368
  },
  {
    "content": "the on the browser so we don't need to like",
    "start": 3371
  },
  {
    "content": "this is without oh it's all compressed so that's not going to be useful but um",
    "start": 3375
  },
  {
    "content": "this this code is what was generated and this code is what we see",
    "start": 3380
  },
  {
    "content": "we're not building this at request time we're not building it on the client side",
    "start": 3384
  },
  {
    "content": "this is just a static asset that we're downloading it's the same as if i open",
    "start": 3388
  },
  {
    "content": "up a you know if i open up a text editor and",
    "start": 3392
  },
  {
    "content": "type like h1 hello world that's what it is what it",
    "start": 3395
  },
  {
    "content": "is it's it's it's markup um yeah",
    "start": 3399
  },
  {
    "content": "another way to think of it is that you're not doing the competition on your",
    "start": 3403
  },
  {
    "content": "phone but you're getting this asset from somebody who's already done",
    "start": 3406
  },
  {
    "content": "this computation ahead of time on the server so you're just getting",
    "start": 3410
  },
  {
    "content": "that pre-built page for you yeah",
    "start": 3413
  },
  {
    "content": "exactly that um and so you know when you when you look at this sort of thing um",
    "start": 3418
  },
  {
    "content": "like well a follow-up question so the the",
    "start": 3424
  },
  {
    "content": "benefits of improved caching outweigh that",
    "start": 3426
  },
  {
    "content": "um sort of i mean caching is an extremely hard problem right so one of",
    "start": 3429
  },
  {
    "content": "the things that that i've run into is like at ibm when we were trying to",
    "start": 3434
  },
  {
    "content": "solve this problem originally we we were trying to solve it by like",
    "start": 3439
  },
  {
    "content": "putting a varnish cache in front of a redis cache and then those",
    "start": 3442
  },
  {
    "content": "would sit in front of like so we had varnish in front of our",
    "start": 3446
  },
  {
    "content": "our rendered pages and we had redis in front of our databases and it was trying",
    "start": 3449
  },
  {
    "content": "to make all that really really fast and it would work",
    "start": 3453
  },
  {
    "content": "and then it wouldn't like it would it would work and then something would get",
    "start": 3456
  },
  {
    "content": "out of sync and then we had no idea why and so we're like",
    "start": 3461
  },
  {
    "content": "invalidating the cash and it led to so many headaches and tangles",
    "start": 3464
  },
  {
    "content": "that i don't think it was giving us the benefits that we were hoping for",
    "start": 3469
  },
  {
    "content": "whereas with the the jam stack what we're doing is eliminating pieces",
    "start": 3473
  },
  {
    "content": "we're eliminating moving parts so that you're taking like",
    "start": 3477
  },
  {
    "content": "a rendered asset and you're putting it on a content delivery network",
    "start": 3480
  },
  {
    "content": "and like if you're putting it on you know",
    "start": 3484
  },
  {
    "content": "netlify has a good cdn that's kind of a multi-cloud it uses",
    "start": 3488
  },
  {
    "content": "uh aws and azure and google cloud and all those or you can you know put it up",
    "start": 3491
  },
  {
    "content": "on fastly you can put it up on akamai whatever you want to use",
    "start": 3496
  },
  {
    "content": "all of those are very specially designed to heavily cache",
    "start": 3500
  },
  {
    "content": "with very good invalidation so that you don't end up with that situation where",
    "start": 3504
  },
  {
    "content": "things are like disconnected um for that reason",
    "start": 3507
  },
  {
    "content": "this approach is going to be i i hesitate to say superior i will say",
    "start": 3513
  },
  {
    "content": "less prone to keep you up all night because you can't figure out what's",
    "start": 3521
  },
  {
    "content": "wrong um and to me like for what i'm",
    "start": 3525
  },
  {
    "content": "optimizing for in my life that is a superior approach",
    "start": 3529
  },
  {
    "content": "[Laughter] um but yeah so so i guess surety when",
    "start": 3532
  },
  {
    "content": "you when you think about this where does this start to break down like",
    "start": 3540
  },
  {
    "content": "what what do you see as being the challenges of this",
    "start": 3544
  },
  {
    "content": "um especially at paypal scale yeah so there's a at paypal scale especially",
    "start": 3547
  },
  {
    "content": "right there's like custom things we're doing in the node the",
    "start": 3553
  },
  {
    "content": "server for the web app that we created here um and",
    "start": 3557
  },
  {
    "content": "what works well is that when a user navigates to a page we can deliver that",
    "start": 3563
  },
  {
    "content": "page to them we can deliver the shell and with the",
    "start": 3567
  },
  {
    "content": "help of javascript we can also make that page or that shell dynamic and that",
    "start": 3570
  },
  {
    "content": "works really well so we can give this dynamic",
    "start": 3575
  },
  {
    "content": "app experience to the user when it starts breaking is when we have",
    "start": 3578
  },
  {
    "content": "these custom logic that we have",
    "start": 3584
  },
  {
    "content": "for the purpose of logging authentication um",
    "start": 3588
  },
  {
    "content": "a b testing one of the things that i found really hard and i still don't have",
    "start": 3595
  },
  {
    "content": "a solution for that is how are we going to do a b testing in",
    "start": 3599
  },
  {
    "content": "this approach um so we do like we do that in",
    "start": 3602
  },
  {
    "content": "enterprises quite often so that's a common use case as well so",
    "start": 3608
  },
  {
    "content": "with with something like a b testing um there",
    "start": 3613
  },
  {
    "content": "are ways to do that on the client side with",
    "start": 3616
  },
  {
    "content": "something like optimizely has has client-side a b",
    "start": 3619
  },
  {
    "content": "testing which in certain cases can be awesome in",
    "start": 3622
  },
  {
    "content": "other cases it can be a performance drag um but like they're",
    "start": 3625
  },
  {
    "content": "also uh phil hawksworth has uh some really",
    "start": 3629
  },
  {
    "content": "good content on this let me see what is phil hawk's worth if i can spell",
    "start": 3632
  },
  {
    "content": "it hawks worth a b testing",
    "start": 3637
  },
  {
    "content": "um he has here's one some really good content on",
    "start": 3643
  },
  {
    "content": "how to do this where you're basically able like netlify is",
    "start": 3649
  },
  {
    "content": "kind of built for this you can just do it",
    "start": 3652
  },
  {
    "content": "by setting up two branches and then setting what percentage of people you",
    "start": 3655
  },
  {
    "content": "want to see each one and it will handle the the",
    "start": 3659
  },
  {
    "content": "cookies and the the session so that people see the same split",
    "start": 3662
  },
  {
    "content": "based on what they're doing um so there there are ways like you can use netlify",
    "start": 3665
  },
  {
    "content": "for that specifically but you can also do it through",
    "start": 3670
  },
  {
    "content": "your cdn by um setting some sessions and and",
    "start": 3673
  },
  {
    "content": "doing some routing that way where you can basically look at",
    "start": 3676
  },
  {
    "content": "somebody coming in and you can tag them and then um use your routing layer to",
    "start": 3680
  },
  {
    "content": "kind of proxy over like slash account you would you would",
    "start": 3684
  },
  {
    "content": "basically proxy slash account check for the cookie",
    "start": 3688
  },
  {
    "content": "if it has one you would route them to the one associated with that like",
    "start": 3690
  },
  {
    "content": "account a or account b um and then if they don't have one you would",
    "start": 3694
  },
  {
    "content": "look at your percentages and assign them one or the other uh",
    "start": 3699
  },
  {
    "content": "and then like they they get tagged with that so it's very similar to the way you",
    "start": 3702
  },
  {
    "content": "would do it on a server but it is um it's you know",
    "start": 3705
  },
  {
    "content": "just inbuilt in metallify so this this particular feature yeah we have",
    "start": 3710
  },
  {
    "content": "split testing built into netlify which is which is pretty fun",
    "start": 3715
  },
  {
    "content": "um it makes it nice and easy you just get two branches and you're like i would",
    "start": 3718
  },
  {
    "content": "like to see what these two branches look like side by side",
    "start": 3722
  },
  {
    "content": "and test performance um and so that part is really really nice",
    "start": 3725
  },
  {
    "content": "uh but yeah if you want to use like it's not a strictly netlify thing it's a",
    "start": 3729
  },
  {
    "content": "thing that you can build in by uh working on your routing basically",
    "start": 3733
  },
  {
    "content": "so what i'm guessing is that it's probably picking a cookie from the",
    "start": 3738
  },
  {
    "content": "browser and as part of your api you're sending",
    "start": 3741
  },
  {
    "content": "that cookie over to whichever layer does uh uh the actual a",
    "start": 3745
  },
  {
    "content": "b testing for you is that right i can't",
    "start": 3750
  },
  {
    "content": "remember exactly how it works but it's we send something in the headers",
    "start": 3754
  },
  {
    "content": "for the request that we can use to to sort people properly",
    "start": 3758
  },
  {
    "content": "okay so i think for our purpose what we could do is",
    "start": 3763
  },
  {
    "content": "we could pick that cookie from the uh from the html from the browser and send",
    "start": 3766
  },
  {
    "content": "it over as part of our api and then we have this",
    "start": 3772
  },
  {
    "content": "inbuilt custom tooling that we use for eb testing",
    "start": 3775
  },
  {
    "content": "um and if that can pick up that cookie",
    "start": 3779
  },
  {
    "content": "then basically we're done then the server the middleware or the server can",
    "start": 3786
  },
  {
    "content": "take care of the rest of the logic for us",
    "start": 3790
  },
  {
    "content": "i guess one thing to note here is that we'll have to still render some sort of",
    "start": 3793
  },
  {
    "content": "shell for the user even before we kick in our ab experience",
    "start": 3797
  },
  {
    "content": "uh something that is uniform so with that you could go more toward a",
    "start": 3801
  },
  {
    "content": "um like a serverless functions approach and",
    "start": 3807
  },
  {
    "content": "with the serverless functions it would be effectively the same thing you're",
    "start": 3810
  },
  {
    "content": "going to get a request in and then those headers will",
    "start": 3813
  },
  {
    "content": "come in so you can determine who somebody is",
    "start": 3816
  },
  {
    "content": "and then based on their header you can send off a call to a serverless function",
    "start": 3819
  },
  {
    "content": "and include that header with it and just return back the different data",
    "start": 3823
  },
  {
    "content": "so you can effectively serve them an empty shell",
    "start": 3827
  },
  {
    "content": "with like a skeleton state that says reloading and then",
    "start": 3830
  },
  {
    "content": "based on what information goes back through the serverless function",
    "start": 3833
  },
  {
    "content": "you can return whichever side of the split test they're supposed to get",
    "start": 3836
  },
  {
    "content": "um and render appropriately and like you can",
    "start": 3840
  },
  {
    "content": "there are some some interesting client-side libraries that i've seen",
    "start": 3843
  },
  {
    "content": "where you can um conditionally load react components",
    "start": 3847
  },
  {
    "content": "so like or any any front-end framework component",
    "start": 3851
  },
  {
    "content": "where you're basically saying like i don't want to load all of the code for",
    "start": 3855
  },
  {
    "content": "all of my a b tests what i want to do instead is i want to check for feature",
    "start": 3858
  },
  {
    "content": "flags and if that feature flag is set i'm",
    "start": 3861
  },
  {
    "content": "going to conditionally load this particular component",
    "start": 3864
  },
  {
    "content": "and that is the the split test basically um so this is one of those things where",
    "start": 3867
  },
  {
    "content": "i think there are a lot of ways to solve that problem and it's very much",
    "start": 3873
  },
  {
    "content": "going to depend on exactly what you're trying to do but",
    "start": 3878
  },
  {
    "content": "i i know i've seen it done um at multiple scales you know we've got",
    "start": 3881
  },
  {
    "content": "clients doing it in you know the the completely client side",
    "start": 3886
  },
  {
    "content": "realm we've got people doing it solo based off of deploy branches so there's",
    "start": 3890
  },
  {
    "content": "no javascript at all and gradients in between so there's",
    "start": 3895
  },
  {
    "content": "there's ways to solve it for sure cool awesome um and then another",
    "start": 3899
  },
  {
    "content": "challenge i was thinking was in the enterprise level we have all",
    "start": 3904
  },
  {
    "content": "these micro services right so how do we pick which micro server should",
    "start": 3907
  },
  {
    "content": "go first or like which this uh front end should become jam stack",
    "start": 3911
  },
  {
    "content": "first um and then one thing that i was",
    "start": 3915
  },
  {
    "content": "actually talking to folks at paypal was that champs tank is",
    "start": 3919
  },
  {
    "content": "not really like one specific technology right it's like this way of",
    "start": 3922
  },
  {
    "content": "thinking really right yes this way of best practices which is",
    "start": 3926
  },
  {
    "content": "so important right often we think jamstack is like we need to introduce",
    "start": 3929
  },
  {
    "content": "gatsby or we need to introduce like natalify or something but it's really",
    "start": 3932
  },
  {
    "content": "not that it's it's a set of best practices we can do",
    "start": 3936
  },
  {
    "content": "yes i mean i i actually would equate jam stack",
    "start": 3940
  },
  {
    "content": "closer to microservices than to a particular tech stack",
    "start": 3943
  },
  {
    "content": "because it's it's a way of thinking about organizing things",
    "start": 3947
  },
  {
    "content": "and and to me the way that graphql creates this clean separation between",
    "start": 3951
  },
  {
    "content": "data services and like the business logic or the the front ends that are",
    "start": 3956
  },
  {
    "content": "consuming that data the jam stack provides a similar clean",
    "start": 3960
  },
  {
    "content": "separation between presentation and everything else",
    "start": 3964
  },
  {
    "content": "and you can kind of make your mind up about how you want to manage that",
    "start": 3968
  },
  {
    "content": "everything else because you could you could set it up as a node service",
    "start": 3971
  },
  {
    "content": "that is all of your business logic um or you",
    "start": 3976
  },
  {
    "content": "can set it up as serverless functions that",
    "start": 3979
  },
  {
    "content": "that just do like ad hoc things and that can be whatever you",
    "start": 3981
  },
  {
    "content": "you choose like it really doesn't matter um",
    "start": 3984
  },
  {
    "content": "or you could set it up all up to be client side and it just makes a call to",
    "start": 3988
  },
  {
    "content": "your graphql layer directly and you've got static assets that you",
    "start": 3991
  },
  {
    "content": "know asynchronously call graphql for the dynamic stuff",
    "start": 3995
  },
  {
    "content": "so the but the thing that's important is not",
    "start": 3998
  },
  {
    "content": "how you do it it's that what you're doing is you're eliminating this need",
    "start": 4002
  },
  {
    "content": "for a long running server and the reason for that is because we",
    "start": 4006
  },
  {
    "content": "want to get away from the ability for someone to like ddos our website",
    "start": 4011
  },
  {
    "content": "um and like the the the power of this really is",
    "start": 4016
  },
  {
    "content": "like do you remember when popeyes uh launched that chicken sandwich and the",
    "start": 4021
  },
  {
    "content": "internet and like lost its mind um yeah so they they built the popeye's",
    "start": 4024
  },
  {
    "content": "website is a is a jam stack site um it's it's one of",
    "start": 4030
  },
  {
    "content": "netlify's customers so which is why i know these things",
    "start": 4034
  },
  {
    "content": "but um so they they built their site as a jam stack site",
    "start": 4036
  },
  {
    "content": "and even when the whole internet was trying to go to their site",
    "start": 4041
  },
  {
    "content": "they never had a service outage like the they had that like front page of the",
    "start": 4044
  },
  {
    "content": "internet effect where you know hundreds of thousands or",
    "start": 4048
  },
  {
    "content": "millions of people are trying to look at this website at exactly the same time",
    "start": 4051
  },
  {
    "content": "and historically you know it was like the best bad news you could get is that",
    "start": 4055
  },
  {
    "content": "your site got so popular that it got taken down right like oh no we're over",
    "start": 4058
  },
  {
    "content": "capacity like dang it i guess we're so popular",
    "start": 4061
  },
  {
    "content": "that you can't use our website right now the jam stack eliminates that problem",
    "start": 4064
  },
  {
    "content": "you you because everything is served directly from a cdn",
    "start": 4068
  },
  {
    "content": "you can't overload a server and take it down like",
    "start": 4071
  },
  {
    "content": "you i'm sure that you can ddos uh a cdn but",
    "start": 4075
  },
  {
    "content": "it is hard it would take a yeah a really serious effort to take down a",
    "start": 4078
  },
  {
    "content": "cdn just by capacity um and so i think that",
    "start": 4085
  },
  {
    "content": "that that's like that architecture that's why",
    "start": 4089
  },
  {
    "content": "you do it and and the how you do it what stack",
    "start": 4093
  },
  {
    "content": "you're using those things don't matter as much the",
    "start": 4097
  },
  {
    "content": "the important thing are the architectural decisions that mean",
    "start": 4099
  },
  {
    "content": "the entire world can go to your website right now and the infrastructure's not",
    "start": 4102
  },
  {
    "content": "going to fall over because you've generated everything to a static asset",
    "start": 4106
  },
  {
    "content": "which means that there's no work to be done it's just delivering a file",
    "start": 4109
  },
  {
    "content": "yeah that's powerful right um and so yeah so i mean like kind of",
    "start": 4113
  },
  {
    "content": "digging into that a little bit uh because when you start talking about",
    "start": 4119
  },
  {
    "content": "static assets that potentially um",
    "start": 4122
  },
  {
    "content": "opens up this other thing which is like okay well if it's static how do we do",
    "start": 4128
  },
  {
    "content": "dynamic stuff like do we how do we get that user data how do we make those",
    "start": 4131
  },
  {
    "content": "those extra calls um and i think jamstack actually addresses that",
    "start": 4136
  },
  {
    "content": "question really well on their home or their main",
    "start": 4139
  },
  {
    "content": "website which is uh i need to do dynamic stuff how do i",
    "start": 4143
  },
  {
    "content": "do it i think it's on jam stacks website",
    "start": 4147
  },
  {
    "content": "itself yeah where is it um",
    "start": 4151
  },
  {
    "content": "is it in i can't remember where this is but there",
    "start": 4158
  },
  {
    "content": "yeah there there are some really good um some really good examples here",
    "start": 4167
  },
  {
    "content": "on this website which i just dropped in the chat i can't remember where",
    "start": 4172
  },
  {
    "content": "that exact thing is um it's somewhere was it on gatsby so",
    "start": 4176
  },
  {
    "content": "yeah gatsby is a is another resource um they've got",
    "start": 4185
  },
  {
    "content": "a lot of good information gaspijs.org about how you can kind of do some of the",
    "start": 4188
  },
  {
    "content": "dynamic stuff a really common way to do that is um we",
    "start": 4195
  },
  {
    "content": "talked a little bit about the the serverless functions thing um one of",
    "start": 4199
  },
  {
    "content": "the reasons i like serverless functions is because it's",
    "start": 4203
  },
  {
    "content": "it's like you're gonna need a server for that for dynamic stuff i need to be able",
    "start": 4205
  },
  {
    "content": "to send off a request that knows who the user is and in order",
    "start": 4210
  },
  {
    "content": "to do that it has to be somewhat dynamic it has to be listening",
    "start": 4213
  },
  {
    "content": "um and i need to send like an auth token or an api key or something that says hi",
    "start": 4217
  },
  {
    "content": "i'm a user i have permission to see the thing that that i'm asking for",
    "start": 4222
  },
  {
    "content": "and we can't statically generate that like that would be a",
    "start": 4227
  },
  {
    "content": "security nightmare trying to figure out how to you know generate",
    "start": 4230
  },
  {
    "content": "millions of pages with people's personal information and store that",
    "start": 4234
  },
  {
    "content": "we shouldn't do that so instead we can do",
    "start": 4237
  },
  {
    "content": "we could stand up like a node server and that node server doesn't serve",
    "start": 4241
  },
  {
    "content": "any files it's just an api and when i make requests to it i'm going to",
    "start": 4244
  },
  {
    "content": "say like i want you know this user's kind of what we",
    "start": 4249
  },
  {
    "content": "were talking about before with microservices i want the user",
    "start": 4253
  },
  {
    "content": "information let me have that please here's my",
    "start": 4255
  },
  {
    "content": "authentication token um that's pretty cool right but the",
    "start": 4258
  },
  {
    "content": "the risk with that sort of thing is that you are",
    "start": 4264
  },
  {
    "content": "um you're letting someone know where the database",
    "start": 4268
  },
  {
    "content": "is and one of the big benefits of the jam stack is it's",
    "start": 4272
  },
  {
    "content": "really secure by default because there is no server you can't hack the server",
    "start": 4276
  },
  {
    "content": "of a jam stack site you can just deface the generated assets",
    "start": 4280
  },
  {
    "content": "which can be fixed by like roll you know you just upload it again",
    "start": 4284
  },
  {
    "content": "and it's like okay well you're you're a jerk but we changed that password and we",
    "start": 4288
  },
  {
    "content": "re-uploaded the site and like you know no harm no foul you didn't have access",
    "start": 4292
  },
  {
    "content": "to the source code you didn't have access to the data",
    "start": 4295
  },
  {
    "content": "calling an api directly means that you are showing somebody where that data is",
    "start": 4298
  },
  {
    "content": "you're saying oh we do have like api.rsi.com and if you go hammer on that",
    "start": 4303
  },
  {
    "content": "you might be able to get to the user data",
    "start": 4308
  },
  {
    "content": "if instead you use a serverless function the serverless",
    "start": 4311
  },
  {
    "content": "function is like mysite.com you know api give me data",
    "start": 4314
  },
  {
    "content": "and under the hood that serverless function goes to your website",
    "start": 4321
  },
  {
    "content": "but that's never exposed to anybody they can't find it in the network trace they",
    "start": 4325
  },
  {
    "content": "can't look at your source code because the serverless functions live somewhere",
    "start": 4328
  },
  {
    "content": "else and so you're able to kind of make a",
    "start": 4331
  },
  {
    "content": "secret call but that can still have the",
    "start": 4334
  },
  {
    "content": "authentication it can still use the api tokens",
    "start": 4337
  },
  {
    "content": "and it keeps all that out of client-side code so if you need like a",
    "start": 4340
  },
  {
    "content": "an api key that api key lives in the server list function",
    "start": 4343
  },
  {
    "content": "and then your site has a user that sends an authorization token",
    "start": 4347
  },
  {
    "content": "and you can use those two things to say all right i have a logged in user",
    "start": 4350
  },
  {
    "content": "and this is a like authorized use of this api so i'm going to send both of",
    "start": 4354
  },
  {
    "content": "those things in and then somebody can't just like take",
    "start": 4358
  },
  {
    "content": "their json web token out of your client side and go hammer",
    "start": 4361
  },
  {
    "content": "the endpoint to see if they can find like unlisted endpoints or something so",
    "start": 4365
  },
  {
    "content": "there's there's a little bit of security that",
    "start": 4369
  },
  {
    "content": "way uh yeah that's exactly what i was gonna ask where does the serverless",
    "start": 4372
  },
  {
    "content": "function live um oh thank you julie straiter it's good",
    "start": 4376
  },
  {
    "content": "to see you thank you for stopping by so a serverless function is going to",
    "start": 4380
  },
  {
    "content": "live uh in a number of places right so uh",
    "start": 4384
  },
  {
    "content": "like netlify has it's kind of built in like netlify functions are um",
    "start": 4387
  },
  {
    "content": "you just create a folder called functions in your site and netlify will",
    "start": 4394
  },
  {
    "content": "automatically deploy them um and then they'll kind of set up",
    "start": 4397
  },
  {
    "content": "all the the proxy and all that stuff so like",
    "start": 4401
  },
  {
    "content": "this is a netlify function and it's oh that's kind of cool you can",
    "start": 4404
  },
  {
    "content": "do a split test thing but um it you basically you export a handler",
    "start": 4410
  },
  {
    "content": "and then that handler returns a status code",
    "start": 4414
  },
  {
    "content": "and in between it's a node app so you can send off calls to other apis you can",
    "start": 4417
  },
  {
    "content": "save things you can touch databases you can process things",
    "start": 4421
  },
  {
    "content": "um and so that all just lives in this functions folder",
    "start": 4424
  },
  {
    "content": "and then we'll automatically deploy it and it would live at your site by",
    "start": 4429
  },
  {
    "content": "default it's your site.com slash dot netlife function slash the",
    "start": 4433
  },
  {
    "content": "name of the function but you can proxy that to be api or",
    "start": 4437
  },
  {
    "content": "something and and um and that can all be done like in one",
    "start": 4441
  },
  {
    "content": "line of code so what's what's really nice about this",
    "start": 4444
  },
  {
    "content": "is this is it's effectively an abstraction over aws",
    "start": 4448
  },
  {
    "content": "lambda um so aws lambda is one of the like the",
    "start": 4451
  },
  {
    "content": "leading serverless providers where you do you do",
    "start": 4455
  },
  {
    "content": "the same thing you write a function like this",
    "start": 4459
  },
  {
    "content": "and it's a handler um and then you would deploy it to aws lambda and then you",
    "start": 4461
  },
  {
    "content": "would need to kind of set up the routing for it",
    "start": 4465
  },
  {
    "content": "through aws i think you would need like route 53",
    "start": 4468
  },
  {
    "content": "and an api gateway i believe um and then those are that's kind of your",
    "start": 4472
  },
  {
    "content": "deployment pipeline the serverless framework is good for",
    "start": 4477
  },
  {
    "content": "you you write a little bit of yaml and then it kind of automates the deployment",
    "start": 4482
  },
  {
    "content": "um azure has a function solution google cloud has a function solution",
    "start": 4487
  },
  {
    "content": "um i think all the major cloud providers have some support for serverless",
    "start": 4492
  },
  {
    "content": "functions and then there's some independent",
    "start": 4496
  },
  {
    "content": "players as well that like you can go you know like netlify is is kind of",
    "start": 4499
  },
  {
    "content": "an abstraction over aws lambda if you don't want to use aws at all",
    "start": 4503
  },
  {
    "content": "there are some other companies that'll let you do serverless functions through",
    "start": 4506
  },
  {
    "content": "their platform um but in general like",
    "start": 4509
  },
  {
    "content": "all of them are going to be a collection of javascript functions or you can write",
    "start": 4514
  },
  {
    "content": "them in go uh i think you can write in any language",
    "start": 4518
  },
  {
    "content": "depending on which provider you use i think",
    "start": 4521
  },
  {
    "content": "netlify supports javascript and go um so you write your collection of",
    "start": 4523
  },
  {
    "content": "functions you figure out where you're going to deploy them",
    "start": 4528
  },
  {
    "content": "and then you you basically just have this collection of endpoints",
    "start": 4531
  },
  {
    "content": "it's kind of like it's standing up a single rest endpoint at a time",
    "start": 4535
  },
  {
    "content": "effectively and then you can if you want to turn that into a",
    "start": 4538
  },
  {
    "content": "you can use graphql with it you can use rest you can use you know",
    "start": 4543
  },
  {
    "content": "direct database connections if you if you are into that sort of thing like",
    "start": 4546
  },
  {
    "content": "you can do whatever you want um but it's it's so the way the way your",
    "start": 4550
  },
  {
    "content": "this flow would work is that from your html page you would call",
    "start": 4556
  },
  {
    "content": "the serverless function um and the service",
    "start": 4560
  },
  {
    "content": "serverless function then figures out which api",
    "start": 4563
  },
  {
    "content": "to call um and has access to the database",
    "start": 4566
  },
  {
    "content": "through a api layer yeah so i can let me show really quickly um i'm",
    "start": 4570
  },
  {
    "content": "actually this is exciting that we're talking",
    "start": 4577
  },
  {
    "content": "about this because i'm i'm doing a front-end master's course on this",
    "start": 4579
  },
  {
    "content": "tomorrow so i have examples that i've been working on",
    "start": 4582
  },
  {
    "content": "uh all week that i can show real quick so this is a",
    "start": 4585
  },
  {
    "content": "sneak preview of tomorrow's workshop um so this is like",
    "start": 4589
  },
  {
    "content": "a uh let's see i'm this is good check it out main",
    "start": 4593
  },
  {
    "content": "um so this is what a serverless function looks like",
    "start": 4598
  },
  {
    "content": "if you want to say load movies from i'm using hasura as a",
    "start": 4601
  },
  {
    "content": "database so i have a utility function that uses node fetch to send off a query",
    "start": 4608
  },
  {
    "content": "um to hasura so it just sends off my hasura secret key to",
    "start": 4615
  },
  {
    "content": "this uh hisura graphql endpoint um it sends it as a post request",
    "start": 4622
  },
  {
    "content": "and then when it comes back it just returns the data",
    "start": 4627
  },
  {
    "content": "and so i use that here to say here's my graphql query",
    "start": 4630
  },
  {
    "content": "i want the the data about the movies and once i get that then i make a call",
    "start": 4635
  },
  {
    "content": "to the omdb api and i pull in additional",
    "start": 4640
  },
  {
    "content": "information so i pull off the the ratings like their score from",
    "start": 4645
  },
  {
    "content": "metacritic and rotten tomatoes and stuff and i combine all of that together and i",
    "start": 4648
  },
  {
    "content": "return it and so i'm able then in my front end to",
    "start": 4653
  },
  {
    "content": "make a request to this data where let's see here it is",
    "start": 4658
  },
  {
    "content": "i make a fetch call to the function so i make a call to this movies function",
    "start": 4662
  },
  {
    "content": "which is the one we were just looking at and when i get it back i just loop",
    "start": 4666
  },
  {
    "content": "through and put this data into uh the container right um",
    "start": 4670
  },
  {
    "content": "and so i had this pulled up i think i have this pulled up",
    "start": 4677
  },
  {
    "content": "yeah so this is what is it this is the workshop um it's going to be live",
    "start": 4681
  },
  {
    "content": "tomorrow if you want to watch it and then this is the this is what that",
    "start": 4685
  },
  {
    "content": "page actually looks like so it's pulling the movie data and then",
    "start": 4689
  },
  {
    "content": "this is the data from the omdb and it all gets assembled it",
    "start": 4693
  },
  {
    "content": "at runtime so i'm loading it client-side but you could load this ahead of time if",
    "start": 4697
  },
  {
    "content": "you wanted to",
    "start": 4701
  },
  {
    "content": "but that calls off to a serverless function and then we get that data back",
    "start": 4704
  },
  {
    "content": "right so i also did these ones like i'm i'm",
    "start": 4707
  },
  {
    "content": "unreasonably proud of how much i put so much time into these",
    "start": 4713
  },
  {
    "content": "very proud of myself which one is your most popular movie uh",
    "start": 4718
  },
  {
    "content": "i i mean this is my favorite but i think",
    "start": 4725
  },
  {
    "content": "the most popular movie was i think this one's the best rated in the",
    "start": 4728
  },
  {
    "content": "boop yeah this is this one's got the best",
    "start": 4732
  },
  {
    "content": "ratings um but yeah",
    "start": 4736
  },
  {
    "content": "so don't the the don't make fun of my bee i tried my best",
    "start": 4740
  },
  {
    "content": "i got close right um but anyways so so all of that is powered by um",
    "start": 4747
  },
  {
    "content": "by these serverless functions and then you can do the same thing to like add",
    "start": 4754
  },
  {
    "content": "movies so part of what we'll do in this uh in this",
    "start": 4758
  },
  {
    "content": "app is we'll have the ability to",
    "start": 4762
  },
  {
    "content": "i'm not going to log in um we'll have the ability to uh",
    "start": 4765
  },
  {
    "content": "to create new movies and it's all protected by",
    "start": 4769
  },
  {
    "content": "by password stuff so you know we're able to pull in",
    "start": 4772
  },
  {
    "content": "like that same hasura utility to send off",
    "start": 4776
  },
  {
    "content": "a mutation this time and we create a new movie",
    "start": 4780
  },
  {
    "content": "but we're able to grab that data from the client side",
    "start": 4784
  },
  {
    "content": "um we pull the user and check that they're an admin",
    "start": 4788
  },
  {
    "content": "and make sure and if they're not then we can bounce them back and say like now",
    "start": 4792
  },
  {
    "content": "you're not authorized to do this thing and if they are authorized then we let",
    "start": 4795
  },
  {
    "content": "them do the thing and send it back and like this is the whole app there's no",
    "start": 4799
  },
  {
    "content": "other server running there's no other thing so it just consolidates it all",
    "start": 4802
  },
  {
    "content": "down to like i'm just writing logic right i'm not figuring out how to",
    "start": 4806
  },
  {
    "content": "deploy this it's just this folder and i tell netlify",
    "start": 4811
  },
  {
    "content": "to deploy it that's like all the config that i need",
    "start": 4815
  },
  {
    "content": "to get my serverless functions up and running",
    "start": 4818
  },
  {
    "content": "and so it eliminates this enormous amount of overhead for me",
    "start": 4820
  },
  {
    "content": "yeah so you move the business logic layer out into smaller functions and",
    "start": 4825
  },
  {
    "content": "they are deployed now like on aws um yeah that's that's super handy super",
    "start": 4829
  },
  {
    "content": "cool um super nimble as well yeah and that's",
    "start": 4835
  },
  {
    "content": "what i like about it right is that you're you're basically",
    "start": 4839
  },
  {
    "content": "each thing is this very controlled story so instead of this sprawl where the",
    "start": 4842
  },
  {
    "content": "logic kind of spreads out and gets its tendrils into like all these different",
    "start": 4848
  },
  {
    "content": "uis and then you're depending on it for different things",
    "start": 4852
  },
  {
    "content": "like it's just one function and each function is self-contained so",
    "start": 4854
  },
  {
    "content": "you know outside of the shared utility and",
    "start": 4858
  },
  {
    "content": "you can make any architecture bad right like you can if you put an effort into",
    "start": 4861
  },
  {
    "content": "it you can make anything hard to maintain",
    "start": 4864
  },
  {
    "content": "but i i think that the the major benefit here is that because there's so little",
    "start": 4866
  },
  {
    "content": "boilerplate it's easier to keep things contextually",
    "start": 4871
  },
  {
    "content": "grouped and and separate enough that they're",
    "start": 4875
  },
  {
    "content": "maintainable without needing like huge cross-team",
    "start": 4877
  },
  {
    "content": "collaboration to maintain this stuff yeah and that's actually a very common",
    "start": 4881
  },
  {
    "content": "use case as well right like we'll have our front-end form and all we're doing",
    "start": 4885
  },
  {
    "content": "is like we've rendered our form we're letting the user fill and fill out the",
    "start": 4889
  },
  {
    "content": "data and then we are collecting that data on our server layer",
    "start": 4893
  },
  {
    "content": "and sending it over to the api so now we have access to the api we can use the",
    "start": 4896
  },
  {
    "content": "serverless function to just deploy that piece of code keep it very light as",
    "start": 4900
  },
  {
    "content": "well exactly exactly um so that",
    "start": 4906
  },
  {
    "content": "that i think is like this is why i think it's so exciting because when you get",
    "start": 4910
  },
  {
    "content": "into the enterprise like the hardest part about building",
    "start": 4915
  },
  {
    "content": "enterprise apps isn't well okay take this with a grain of salt",
    "start": 4917
  },
  {
    "content": "the hardest part for me is not building it's not building the",
    "start": 4921
  },
  {
    "content": "software it's keeping everybody who's working on the",
    "start": 4924
  },
  {
    "content": "software aligned on how to build good software because it",
    "start": 4928
  },
  {
    "content": "feels like most of the time that i spent wasn't on",
    "start": 4932
  },
  {
    "content": "making the thing work it was on trying to talk to everybody else",
    "start": 4936
  },
  {
    "content": "to make sure that we weren't accidentally breaking each other's stuff",
    "start": 4939
  },
  {
    "content": "i i think that what's exciting about this approach",
    "start": 4944
  },
  {
    "content": "is that it creates better boundaries between things so that it's less likely",
    "start": 4947
  },
  {
    "content": "that i can accidentally break your code by making a change to mine and i think",
    "start": 4952
  },
  {
    "content": "that that's a really really powerful thing especially when you're starting to",
    "start": 4957
  },
  {
    "content": "look at scale um because you know if the if the team",
    "start": 4960
  },
  {
    "content": "that i'm collaborating with is in china we've got an hour of overlap",
    "start": 4964
  },
  {
    "content": "a day when we're both in the office um and that's that's not really a",
    "start": 4967
  },
  {
    "content": "that's not going to work if we have to collaborate heavily we need to be able",
    "start": 4973
  },
  {
    "content": "to hand off and talk to each other but not",
    "start": 4976
  },
  {
    "content": "necessarily need to be like all right i'm going to flip this switch now then",
    "start": 4978
  },
  {
    "content": "you flip that switch and then let's test this together like we don't have time",
    "start": 4981
  },
  {
    "content": "for that we'll never get anything done yeah and because these are separate",
    "start": 4984
  },
  {
    "content": "right like i can't break your app if i deploy something",
    "start": 4989
  },
  {
    "content": "exactly and and the other thing that's nice about this too is like the",
    "start": 4993
  },
  {
    "content": "the jam stack approach um let's pull up like a site here",
    "start": 4997
  },
  {
    "content": "the the thing that's really exciting about this is like if we go in here and",
    "start": 5001
  },
  {
    "content": "we accidentally break something i can look at my deploys and let's say",
    "start": 5005
  },
  {
    "content": "this deploy is broken i can click on this one and i can just",
    "start": 5008
  },
  {
    "content": "roll it back like that will just move us back to the previous",
    "start": 5011
  },
  {
    "content": "deploy so and it's instant so if we accidentally break something it's not",
    "start": 5014
  },
  {
    "content": "like we have to go untangle the server code or like roll",
    "start": 5019
  },
  {
    "content": "back databases or whatever we just we're like okay well let's just",
    "start": 5021
  },
  {
    "content": "put the old one back let's figure out what went wrong and then we'll redeploy",
    "start": 5025
  },
  {
    "content": "again and and the fix will roll out um and so",
    "start": 5028
  },
  {
    "content": "you know that and that's not it's very easy on netlify but it's",
    "start": 5031
  },
  {
    "content": "not a netlify specific thing it's a jam stack thing if you are",
    "start": 5036
  },
  {
    "content": "rendering to static assets every deployment of your site is a folder",
    "start": 5039
  },
  {
    "content": "and so each deployment just creates a new folder you just",
    "start": 5043
  },
  {
    "content": "throw those folders up and if you keep the last you know",
    "start": 5047
  },
  {
    "content": "whatever number of deploys on hand if something goes wrong you just flip back",
    "start": 5050
  },
  {
    "content": "to the previous deploy and you're happy yep um",
    "start": 5055
  },
  {
    "content": "okay so we've got like five minutes left were there any questions that you wanted",
    "start": 5060
  },
  {
    "content": "to dig into that we didn't get a chance to",
    "start": 5063
  },
  {
    "content": "let's see i have my list of handy questions here",
    "start": 5067
  },
  {
    "content": "so we talked about doing an a b test um",
    "start": 5072
  },
  {
    "content": "we talked about moving custom",
    "start": 5079
  },
  {
    "content": "thank you chad we talked about moving custom",
    "start": 5082
  },
  {
    "content": "middlewares to server layer and those are those are the biggest two",
    "start": 5089
  },
  {
    "content": "challenges i think that we've faced one of the things that we're working on",
    "start": 5092
  },
  {
    "content": "at paypal as well is to make the deployment to cdn",
    "start": 5096
  },
  {
    "content": "easier and i know like netlify does it really well so",
    "start": 5099
  },
  {
    "content": "tell me a little bit about how netfly is moving assets to cdn with git",
    "start": 5102
  },
  {
    "content": "deployments so our our process is kind of all built",
    "start": 5107
  },
  {
    "content": "where when you push to get we listen for that event",
    "start": 5112
  },
  {
    "content": "and then we'll pull the changes run the build command",
    "start": 5115
  },
  {
    "content": "and any we have build plugins if you want to do like visual diffing",
    "start": 5118
  },
  {
    "content": "or integration tests or something and then once we get a success",
    "start": 5122
  },
  {
    "content": "we will upload to um to our cdn and we do that like we have a like a",
    "start": 5127
  },
  {
    "content": "multi-cloud cdn so we've got a bunch of stuff in the background that's that's",
    "start": 5133
  },
  {
    "content": "going on but effectively we're just uploading the files",
    "start": 5136
  },
  {
    "content": "and once we upload the files it gets a unique url",
    "start": 5139
  },
  {
    "content": "which is based on the git commit so if we look at",
    "start": 5142
  },
  {
    "content": "let's look at one of these commits here i have my",
    "start": 5146
  },
  {
    "content": "production branch but then i have like this older branch and if i want to see",
    "start": 5149
  },
  {
    "content": "this deploy i can click preview so this is the",
    "start": 5153
  },
  {
    "content": "previous instance of this app that i built",
    "start": 5156
  },
  {
    "content": "um and if i want to go to the live version i can go",
    "start": 5160
  },
  {
    "content": "to like the top level this is the actual live site",
    "start": 5165
  },
  {
    "content": "and so we're able to kind of each one is it is an independent thing",
    "start": 5168
  },
  {
    "content": "and then once we know that the the upload is successful",
    "start": 5173
  },
  {
    "content": "we just route like we update the routing to say",
    "start": 5177
  },
  {
    "content": "instead of production being this this deploy now make production this",
    "start": 5180
  },
  {
    "content": "deploy um and so basically the sites are always",
    "start": 5186
  },
  {
    "content": "kind of live unless you specifically take them down",
    "start": 5190
  },
  {
    "content": "and you're able to just kind of route between so you can put that behind a",
    "start": 5193
  },
  {
    "content": "firewall where like only the one that's production is",
    "start": 5196
  },
  {
    "content": "actually visible outside the firewall but that way all the sites are always",
    "start": 5199
  },
  {
    "content": "there and you can you know you can do really interesting comparisons you could",
    "start": 5203
  },
  {
    "content": "do like performance tracking over time you",
    "start": 5207
  },
  {
    "content": "can make sure that your your sites are like actually faster and",
    "start": 5210
  },
  {
    "content": "and all those things and and it um that's handled by because you know",
    "start": 5213
  },
  {
    "content": "because you're building into a folder you're just it's you're effectively",
    "start": 5218
  },
  {
    "content": "uploading the folder to a cdn the same way that you used to drag a folder into",
    "start": 5221
  },
  {
    "content": "your ftp client back in the 90s right well i've i've done it when i was",
    "start": 5225
  },
  {
    "content": "uh just starting out six seven years ago so not that long ago",
    "start": 5231
  },
  {
    "content": "yeah i think wordpress yeah yeah i was yeah i did",
    "start": 5237
  },
  {
    "content": "some wordpress stuff like in the like 2010-ish we were still using ftp",
    "start": 5241
  },
  {
    "content": "for that like yeah exactly so it's it's definitely",
    "start": 5245
  },
  {
    "content": "like what i like about this is it it feels as",
    "start": 5248
  },
  {
    "content": "simple as when i was doing that sort of work when i just had like a",
    "start": 5251
  },
  {
    "content": "website in my ftp folder and i would drag",
    "start": 5255
  },
  {
    "content": "you know i drag the new files and and then it would go live and if i didn't",
    "start": 5258
  },
  {
    "content": "like it i would just drag different files and then that would go live",
    "start": 5261
  },
  {
    "content": "and this is the same idea i push changes to get and whatever goes up to get",
    "start": 5264
  },
  {
    "content": "ends up live on the website and you know we",
    "start": 5269
  },
  {
    "content": "and like you can put controls in place for that but it's really really",
    "start": 5272
  },
  {
    "content": "like i love the simplicity of that it moves us back to this idea of like",
    "start": 5275
  },
  {
    "content": "continuous deployment and not continuous deployment because of this",
    "start": 5280
  },
  {
    "content": "really elaborate devops process but continuous deployment because all of",
    "start": 5284
  },
  {
    "content": "those gates have been removed you're able to just get something live",
    "start": 5287
  },
  {
    "content": "yeah i would love to keep talking about this all day because it's so much fun um",
    "start": 5293
  },
  {
    "content": "so christy if you don't mind do you want to give us one more dev joke and then",
    "start": 5298
  },
  {
    "content": "i'll we'll get out of here i'll give you two ooh all right",
    "start": 5301
  },
  {
    "content": "okay what did javascript call his son i don't know what did javascript call",
    "start": 5307
  },
  {
    "content": "his son they said that's topical",
    "start": 5313
  },
  {
    "content": "okay this one i really like uh what airline do developers prefer when they",
    "start": 5324
  },
  {
    "content": "are in a rush what airline do developers prefer when",
    "start": 5329
  },
  {
    "content": "they're in a rush i don't know does the child have any",
    "start": 5333
  },
  {
    "content": "guesses what do you think chat",
    "start": 5338
  },
  {
    "content": "i don't think they do delta okay we'll do one more okay all right",
    "start": 5345
  },
  {
    "content": "one more how long does a loop last how long does",
    "start": 5358
  },
  {
    "content": "a loop last for a while",
    "start": 5364
  },
  {
    "content": "god okay yeah that was excellent so um trudy always a pleasure having you on",
    "start": 5378
  },
  {
    "content": "thank you so much for coming on and talking with me today i really",
    "start": 5384
  },
  {
    "content": "really enjoyed this chat uh you are able to if you want you",
    "start": 5387
  },
  {
    "content": "can see our notes here um and we'll make sure that all the",
    "start": 5391
  },
  {
    "content": "links that we shared today get published in the the show notes um",
    "start": 5395
  },
  {
    "content": "if this is your first time thank you for coming and hanging out uh definitely go",
    "start": 5400
  },
  {
    "content": "check out the schedule we have a whole collection",
    "start": 5403
  },
  {
    "content": "of amazing episodes coming up and a bunch that i haven't even had a chance",
    "start": 5406
  },
  {
    "content": "to put on the schedule yet but later this week",
    "start": 5410
  },
  {
    "content": "we've got david east coming on to teach us firebase this is going to be a whole",
    "start": 5413
  },
  {
    "content": "ton of fun really want to see you there so uh so",
    "start": 5416
  },
  {
    "content": "please you know add it to google calendar subscribe",
    "start": 5419
  },
  {
    "content": "we'll see you next time um shruti thank you",
    "start": 5422
  },
  {
    "content": "so so so much for coming on today thanks for having me jason this was a",
    "start": 5425
  },
  {
    "content": "lot of fun i love the boobs i i too love the boobs thank you chat",
    "start": 5430
  },
  {
    "content": "for for burying us in boops um one more shout out to our sponsors uh",
    "start": 5435
  },
  {
    "content": "white co-captioning for doing the live captioning",
    "start": 5439
  },
  {
    "content": "and netlify fauna sanity and off zero for making the live captioning possible",
    "start": 5442
  },
  {
    "content": "y'all are amazing thank you very much chat stay tuned we're gonna raid let me",
    "start": 5446
  },
  {
    "content": "get i'm still here hello uh okay we'll see",
    "start": 5450
  },
  {
    "content": "you next time thanks everybody you",
    "start": 5453
  }
]
